/* Generated by Cython 0.25.2 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "NPY_NO_DEPRECATED_API", 
                "7"
            ]
        ], 
        "depends": [
            "./pysegtools/general/cython/npy_helper.h", 
            "./pysegtools/general/cython/npy_helper.pxd", 
            "/home/jbush/CHM/lib/python2.7/site-packages/numpy/core/include/numpy/arrayobject.h", 
            "pysegtools/general/cython/npy_helper.h", 
            "pysegtools/general/cython/npy_helper.pxd"
        ], 
        "extra_compile_args": [
            "-std=c++11", 
            "-O3", 
            "-DNPY_NO_DEPRECATED_API=7", 
            "-fopenmp"
        ], 
        "extra_link_args": [
            "-fopenmp"
        ], 
        "include_dirs": [
            "/home/jbush/CHM/lib/python2.7/site-packages/numpy/core/include", 
            "./pysegtools/general/cython"
        ], 
        "language": "c++"
    }, 
    "module_name": "pysegtools.images.filters._frangi"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pysegtools__images__filters___frangi
#define __PYX_HAVE_API__pysegtools__images__filters___frangi
#include "npy_helper.h"
#include "numpy/arrayobject.h"
#include <math.h>
#include <float.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pysegtools/images/filters/_frangi.pyx",
  "pysegtools/general/cython/npy_helper.pxd",
};

/* "npy_helper.pxd":192
 * 
 * ############### Helpers ###############
 * ctypedef Py_intptr_t intp             # <<<<<<<<<<<<<<
 * ctypedef Py_uintptr_t uintp
 * cdef extern from "npy_helper.h":
 */
typedef Py_intptr_t __pyx_t_10npy_helper_intp;

/* "npy_helper.pxd":193
 * ############### Helpers ###############
 * ctypedef Py_intptr_t intp
 * ctypedef Py_uintptr_t uintp             # <<<<<<<<<<<<<<
 * cdef extern from "npy_helper.h":
 *     # Makes Numpy a bit nicer to use from Cython
 */
typedef Py_uintptr_t __pyx_t_10npy_helper_uintp;

/* "pysegtools/images/filters/_frangi.pyx":20
 * with_cython = True
 * 
 * ctypedef npy_double dbl             # <<<<<<<<<<<<<<
 * ctypedef dbl* dbl_p
 * 
 */
typedef npy_double __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl;

/*--- Type declarations ---*/
struct __pyx_opt_args_10pysegtools_6images_7filters_7_frangi_eig3volume;

/* "pysegtools/images/filters/_frangi.pyx":21
 * 
 * ctypedef npy_double dbl
 * ctypedef dbl* dbl_p             # <<<<<<<<<<<<<<
 * 
 * ########## Frangi 2D ##########
 */
typedef __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl *__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p;

/* "pysegtools/images/filters/_frangi.pyx":368
 *     Dxx *= c; Dyy *= c; Dzz *= c; Dxy *= c; Dxz *= c; Dyz *= c
 * 
 * cdef bint eig3volume(intp N, dbl_p Dxx, dbl_p Dxy, dbl_p Dxz, dbl_p Dyy, dbl_p Dyz, dbl_p Dzz, bint return_vec=False) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Calculate the eigenvalues and possibly the eigenvectors from the Hessian matrix of an image
 */
struct __pyx_opt_args_10pysegtools_6images_7filters_7_frangi_eig3volume {
  int __pyx_n;
  int return_vec;
};

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'numpy' */

/* Module declarations from 'npy_helper' */
static PyTypeObject *__pyx_ptype_10npy_helper_ndarray = 0;
static PyTypeObject *__pyx_ptype_10npy_helper_dtype = 0;
static PyTypeObject *__pyx_ptype_10npy_helper_flatiter = 0;

/* Module declarations from 'libc.math' */

/* Module declarations from 'libc.float' */

/* Module declarations from 'pysegtools.images.filters._frangi' */
static void __pyx_f_10pysegtools_6images_7filters_7_frangi_hessian2(PyArrayObject *, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl, PyArrayObject *, PyArrayObject *, PyArrayObject *, PyArrayObject *); /*proto*/
static void __pyx_f_10pysegtools_6images_7filters_7_frangi_eigval2image(__pyx_t_10npy_helper_intp, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p); /*proto*/
static void __pyx_f_10pysegtools_6images_7filters_7_frangi_eig2image(__pyx_t_10npy_helper_intp, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p); /*proto*/
static void __pyx_f_10pysegtools_6images_7filters_7_frangi_hessian3(PyArrayObject *, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl, PyArrayObject *, PyArrayObject *, PyArrayObject *, PyArrayObject *, PyArrayObject *, PyArrayObject *, PyArrayObject *); /*proto*/
static int __pyx_f_10pysegtools_6images_7filters_7_frangi_eig3volume(__pyx_t_10npy_helper_intp, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p, struct __pyx_opt_args_10pysegtools_6images_7filters_7_frangi_eig3volume *__pyx_optional_args); /*proto*/
static int __pyx_f_10pysegtools_6images_7filters_7_frangi_eig_calc(__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl *, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl *); /*proto*/
static CYTHON_INLINE int __pyx_f_10pysegtools_6images_7filters_7_frangi_ev(__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl *, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl); /*proto*/
#define __Pyx_MODULE_NAME "pysegtools.images.filters._frangi"
int __pyx_module_is_main_pysegtools__images__filters___frangi = 0;

/* Implementation of 'pysegtools.images.filters._frangi' */
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_round;
static const char __pyx_k_N[] = "N";
static const char __pyx_k_V[] = "V";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_S2[] = "S2";
static const char __pyx_k_im[] = "im";
static const char __pyx_k_vx[] = "vx";
static const char __pyx_k_vy[] = "vy";
static const char __pyx_k_vz[] = "vz";
static const char __pyx_k_Dxx[] = "Dxx";
static const char __pyx_k_Dxy[] = "Dxy";
static const char __pyx_k_Dxz[] = "Dxz";
static const char __pyx_k_Dyy[] = "Dyy";
static const char __pyx_k_Dyz[] = "Dyz";
static const char __pyx_k_Dzz[] = "Dzz";
static const char __pyx_k_Ra2[] = "Ra2";
static const char __pyx_k_Rb2[] = "Rb2";
static const char __pyx_k_all[] = "__all__";
static const char __pyx_k_exp[] = "exp";
static const char __pyx_k_out[] = "out";
static const char __pyx_k_tmp[] = "tmp";
static const char __pyx_k_beta[] = "beta";
static const char __pyx_k_dirs[] = "dirs";
static const char __pyx_k_lam1[] = "lam1";
static const char __pyx_k_lam2[] = "lam2";
static const char __pyx_k_lam3[] = "lam3";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_pDxx[] = "pDxx";
static const char __pyx_k_pDxy[] = "pDxy";
static const char __pyx_k_pDxz[] = "pDxz";
static const char __pyx_k_pDyy[] = "pDyy";
static const char __pyx_k_pDyz[] = "pDyz";
static const char __pyx_k_pDzz[] = "pDzz";
static const char __pyx_k_pOut[] = "pOut";
static const char __pyx_k_sigs[] = "sigs";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_vecx[] = "vecx";
static const char __pyx_k_vecy[] = "vecy";
static const char __pyx_k_vecz[] = "vecz";
static const char __pyx_k_alpha[] = "alpha";
static const char __pyx_k_black[] = "black";
static const char __pyx_k_c_dyn[] = "c_dyn";
static const char __pyx_k_first[] = "first";
static const char __pyx_k_lam23[] = "lam23";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_pDirs[] = "pDirs";
static const char __pyx_k_pSigs[] = "pSigs";
static const char __pyx_k_pVecX[] = "pVecX";
static const char __pyx_k_pVecY[] = "pVecY";
static const char __pyx_k_pVecZ[] = "pVecZ";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_round[] = "round";
static const char __pyx_k_sigma[] = "sigma";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_sigmas[] = "sigmas";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_frangi2[] = "frangi2";
static const char __pyx_k_frangi3[] = "frangi3";
static const char __pyx_k_lambda1[] = "lambda1";
static const char __pyx_k_lambda2[] = "lambda2";
static const char __pyx_k_lambda3[] = "lambda3";
static const char __pyx_k_correlate1d[] = "correlate1d";
static const char __pyx_k_return_full[] = "return_full";
static const char __pyx_k_with_cython[] = "with_cython";
static const char __pyx_k_scipy_ndimage[] = "scipy.ndimage";
static const char __pyx_k_home_jbush_CHM_segtools_pysegto[] = "/home/jbush/CHM/segtools/pysegtools/images/filters/_frangi.pyx";
static const char __pyx_k_pysegtools_images_filters__frang[] = "pysegtools.images.filters._frangi";
static PyObject *__pyx_n_s_Dxx;
static PyObject *__pyx_n_s_Dxy;
static PyObject *__pyx_n_s_Dxz;
static PyObject *__pyx_n_s_Dyy;
static PyObject *__pyx_n_s_Dyz;
static PyObject *__pyx_n_s_Dzz;
static PyObject *__pyx_n_s_N;
static PyObject *__pyx_n_s_Ra2;
static PyObject *__pyx_n_s_Rb2;
static PyObject *__pyx_n_s_S2;
static PyObject *__pyx_n_s_V;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_beta;
static PyObject *__pyx_n_s_black;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_c_dyn;
static PyObject *__pyx_n_s_correlate1d;
static PyObject *__pyx_n_s_dirs;
static PyObject *__pyx_n_s_exp;
static PyObject *__pyx_n_s_first;
static PyObject *__pyx_n_s_frangi2;
static PyObject *__pyx_n_s_frangi3;
static PyObject *__pyx_kp_s_home_jbush_CHM_segtools_pysegto;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_im;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_lam1;
static PyObject *__pyx_n_s_lam2;
static PyObject *__pyx_n_s_lam23;
static PyObject *__pyx_n_s_lam3;
static PyObject *__pyx_n_s_lambda1;
static PyObject *__pyx_n_s_lambda2;
static PyObject *__pyx_n_s_lambda3;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_out;
static PyObject *__pyx_n_s_pDirs;
static PyObject *__pyx_n_s_pDxx;
static PyObject *__pyx_n_s_pDxy;
static PyObject *__pyx_n_s_pDxz;
static PyObject *__pyx_n_s_pDyy;
static PyObject *__pyx_n_s_pDyz;
static PyObject *__pyx_n_s_pDzz;
static PyObject *__pyx_n_s_pOut;
static PyObject *__pyx_n_s_pSigs;
static PyObject *__pyx_n_s_pVecX;
static PyObject *__pyx_n_s_pVecY;
static PyObject *__pyx_n_s_pVecZ;
static PyObject *__pyx_n_s_pysegtools_images_filters__frang;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_return_full;
static PyObject *__pyx_n_s_round;
static PyObject *__pyx_n_s_scipy_ndimage;
static PyObject *__pyx_n_s_sigma;
static PyObject *__pyx_n_s_sigmas;
static PyObject *__pyx_n_s_sigs;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_tmp;
static PyObject *__pyx_n_s_vecx;
static PyObject *__pyx_n_s_vecy;
static PyObject *__pyx_n_s_vecz;
static PyObject *__pyx_n_s_vx;
static PyObject *__pyx_n_s_vy;
static PyObject *__pyx_n_s_vz;
static PyObject *__pyx_n_s_with_cython;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_pf_10pysegtools_6images_7filters_7_frangi_frangi2(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_im, PyArrayObject *__pyx_v_out, PyObject *__pyx_v_sigmas, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_beta, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_c, int __pyx_v_black, int __pyx_v_return_full); /* proto */
static PyObject *__pyx_pf_10pysegtools_6images_7filters_7_frangi_2frangi3(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_im, PyArrayObject *__pyx_v_out, PyObject *__pyx_v_sigmas, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_alpha, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_beta, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_c, int __pyx_v_black, int __pyx_v_return_full); /* proto */
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_codeobj__2;
static PyObject *__pyx_codeobj__4;

/* "pysegtools/images/filters/_frangi.pyx":24
 * 
 * ########## Frangi 2D ##########
 * def frangi2(ndarray im, ndarray out, tuple sigmas, dbl beta, dbl c, bint black, bint return_full):             # <<<<<<<<<<<<<<
 *     """
 *     Internal function to compute the 2D Frangi filter according to Frangi et al (1998).
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pysegtools_6images_7filters_7_frangi_1frangi2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10pysegtools_6images_7filters_7_frangi_frangi2[] = "\n    Internal function to compute the 2D Frangi filter according to Frangi et al (1998).\n    \n    See frangi.frangi2 for more details. A few differences in the signature are that all arguments\n    are required and a value of 0.0 is used for c to indicate a dynamic value.\n\n    Written by Jeffrey Bush (NCMIR, 2016)\n    Adapted from the MATLAB version by M. Schrijver (2001) and D. Kroon (2009)\n    ";
static PyMethodDef __pyx_mdef_10pysegtools_6images_7filters_7_frangi_1frangi2 = {"frangi2", (PyCFunction)__pyx_pw_10pysegtools_6images_7filters_7_frangi_1frangi2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10pysegtools_6images_7filters_7_frangi_frangi2};
static PyObject *__pyx_pw_10pysegtools_6images_7filters_7_frangi_1frangi2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_im = 0;
  PyArrayObject *__pyx_v_out = 0;
  PyObject *__pyx_v_sigmas = 0;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_beta;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_c;
  int __pyx_v_black;
  int __pyx_v_return_full;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("frangi2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_im,&__pyx_n_s_out,&__pyx_n_s_sigmas,&__pyx_n_s_beta,&__pyx_n_s_c,&__pyx_n_s_black,&__pyx_n_s_return_full,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_im)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("frangi2", 1, 7, 7, 1); __PYX_ERR(0, 24, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sigmas)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("frangi2", 1, 7, 7, 2); __PYX_ERR(0, 24, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("frangi2", 1, 7, 7, 3); __PYX_ERR(0, 24, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("frangi2", 1, 7, 7, 4); __PYX_ERR(0, 24, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_black)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("frangi2", 1, 7, 7, 5); __PYX_ERR(0, 24, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_return_full)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("frangi2", 1, 7, 7, 6); __PYX_ERR(0, 24, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "frangi2") < 0)) __PYX_ERR(0, 24, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_im = ((PyArrayObject *)values[0]);
    __pyx_v_out = ((PyArrayObject *)values[1]);
    __pyx_v_sigmas = ((PyObject*)values[2]);
    __pyx_v_beta = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_beta == ((npy_double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 24, __pyx_L3_error)
    __pyx_v_c = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_c == ((npy_double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 24, __pyx_L3_error)
    __pyx_v_black = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_black == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 24, __pyx_L3_error)
    __pyx_v_return_full = __Pyx_PyObject_IsTrue(values[6]); if (unlikely((__pyx_v_return_full == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 24, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("frangi2", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 24, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysegtools.images.filters._frangi.frangi2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_im), __pyx_ptype_10npy_helper_ndarray, 1, "im", 0))) __PYX_ERR(0, 24, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_10npy_helper_ndarray, 1, "out", 0))) __PYX_ERR(0, 24, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sigmas), (&PyTuple_Type), 1, "sigmas", 1))) __PYX_ERR(0, 24, __pyx_L1_error)
  __pyx_r = __pyx_pf_10pysegtools_6images_7filters_7_frangi_frangi2(__pyx_self, __pyx_v_im, __pyx_v_out, __pyx_v_sigmas, __pyx_v_beta, __pyx_v_c, __pyx_v_black, __pyx_v_return_full);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pysegtools_6images_7filters_7_frangi_frangi2(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_im, PyArrayObject *__pyx_v_out, PyObject *__pyx_v_sigmas, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_beta, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_c, int __pyx_v_black, int __pyx_v_return_full) {
  PyArrayObject *__pyx_v_Dxx = 0;
  PyArrayObject *__pyx_v_Dxy = 0;
  PyArrayObject *__pyx_v_Dyy = 0;
  PyArrayObject *__pyx_v_tmp = 0;
  PyArrayObject *__pyx_v_sigs = 0;
  PyArrayObject *__pyx_v_dirs = 0;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_pDxx;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_pDxy;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_pDyy;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_lambda1;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_lambda2;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_vx;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_vy;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_pOut;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_pSigs;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_pDirs;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_sigma;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_lam1;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_lam2;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_Rb2;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_S2;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_V;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_b;
  int __pyx_v_c_dyn;
  __pyx_t_10npy_helper_intp __pyx_v_i;
  __pyx_t_10npy_helper_intp __pyx_v_N;
  int __pyx_v_first;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __pyx_t_10npy_helper_intp __pyx_t_6;
  __pyx_t_10npy_helper_intp __pyx_t_7;
  __Pyx_RefNannySetupContext("frangi2", 0);

  /* "pysegtools/images/filters/_frangi.pyx":36
 *     # Allocate arrays: 4 temporaries and possibly 3 outputs
 *     cdef ndarray Dxx, Dxy, Dyy, tmp, sigs, dirs
 *     Dxx = PyArray_EMPTY(2, PyArray_SHAPE(im), NPY_DOUBLE, False)             # <<<<<<<<<<<<<<
 *     Dxy = PyArray_EMPTY(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     Dyy = PyArray_EMPTY(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 */
  __pyx_t_1 = ((PyObject *)PyArray_EMPTY(2, PyArray_SHAPE(__pyx_v_im), NPY_DOUBLE, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_Dxx = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":37
 *     cdef ndarray Dxx, Dxy, Dyy, tmp, sigs, dirs
 *     Dxx = PyArray_EMPTY(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     Dxy = PyArray_EMPTY(2, PyArray_SHAPE(im), NPY_DOUBLE, False)             # <<<<<<<<<<<<<<
 *     Dyy = PyArray_EMPTY(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     tmp = PyArray_EMPTY(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 */
  __pyx_t_1 = ((PyObject *)PyArray_EMPTY(2, PyArray_SHAPE(__pyx_v_im), NPY_DOUBLE, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_Dxy = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":38
 *     Dxx = PyArray_EMPTY(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     Dxy = PyArray_EMPTY(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     Dyy = PyArray_EMPTY(2, PyArray_SHAPE(im), NPY_DOUBLE, False)             # <<<<<<<<<<<<<<
 *     tmp = PyArray_EMPTY(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     cdef dbl_p pDxx = <dbl_p>PyArray_DATA(Dxx), pDxy = <dbl_p>PyArray_DATA(Dxy), pDyy = <dbl_p>PyArray_DATA(Dyy)
 */
  __pyx_t_1 = ((PyObject *)PyArray_EMPTY(2, PyArray_SHAPE(__pyx_v_im), NPY_DOUBLE, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_Dyy = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":39
 *     Dxy = PyArray_EMPTY(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     Dyy = PyArray_EMPTY(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     tmp = PyArray_EMPTY(2, PyArray_SHAPE(im), NPY_DOUBLE, False)             # <<<<<<<<<<<<<<
 *     cdef dbl_p pDxx = <dbl_p>PyArray_DATA(Dxx), pDxy = <dbl_p>PyArray_DATA(Dxy), pDyy = <dbl_p>PyArray_DATA(Dyy)
 *     cdef dbl_p lambda1 = pDxx, lambda2 = pDxy, vx, vy
 */
  __pyx_t_1 = ((PyObject *)PyArray_EMPTY(2, PyArray_SHAPE(__pyx_v_im), NPY_DOUBLE, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tmp = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":40
 *     Dyy = PyArray_EMPTY(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     tmp = PyArray_EMPTY(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     cdef dbl_p pDxx = <dbl_p>PyArray_DATA(Dxx), pDxy = <dbl_p>PyArray_DATA(Dxy), pDyy = <dbl_p>PyArray_DATA(Dyy)             # <<<<<<<<<<<<<<
 *     cdef dbl_p lambda1 = pDxx, lambda2 = pDxy, vx, vy
 *     cdef dbl_p pOut = <dbl_p>PyArray_DATA(out), pSigs, pDirs
 */
  __pyx_v_pDxx = ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p)PyArray_DATA(__pyx_v_Dxx));
  __pyx_v_pDxy = ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p)PyArray_DATA(__pyx_v_Dxy));
  __pyx_v_pDyy = ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p)PyArray_DATA(__pyx_v_Dyy));

  /* "pysegtools/images/filters/_frangi.pyx":41
 *     tmp = PyArray_EMPTY(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     cdef dbl_p pDxx = <dbl_p>PyArray_DATA(Dxx), pDxy = <dbl_p>PyArray_DATA(Dxy), pDyy = <dbl_p>PyArray_DATA(Dyy)
 *     cdef dbl_p lambda1 = pDxx, lambda2 = pDxy, vx, vy             # <<<<<<<<<<<<<<
 *     cdef dbl_p pOut = <dbl_p>PyArray_DATA(out), pSigs, pDirs
 *     if return_full:
 */
  __pyx_v_lambda1 = __pyx_v_pDxx;
  __pyx_v_lambda2 = __pyx_v_pDxy;

  /* "pysegtools/images/filters/_frangi.pyx":42
 *     cdef dbl_p pDxx = <dbl_p>PyArray_DATA(Dxx), pDxy = <dbl_p>PyArray_DATA(Dxy), pDyy = <dbl_p>PyArray_DATA(Dyy)
 *     cdef dbl_p lambda1 = pDxx, lambda2 = pDxy, vx, vy
 *     cdef dbl_p pOut = <dbl_p>PyArray_DATA(out), pSigs, pDirs             # <<<<<<<<<<<<<<
 *     if return_full:
 *         sigs = PyArray_ZEROS(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 */
  __pyx_v_pOut = ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p)PyArray_DATA(__pyx_v_out));

  /* "pysegtools/images/filters/_frangi.pyx":43
 *     cdef dbl_p lambda1 = pDxx, lambda2 = pDxy, vx, vy
 *     cdef dbl_p pOut = <dbl_p>PyArray_DATA(out), pSigs, pDirs
 *     if return_full:             # <<<<<<<<<<<<<<
 *         sigs = PyArray_ZEROS(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         dirs = PyArray_ZEROS(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 */
  __pyx_t_2 = (__pyx_v_return_full != 0);
  if (__pyx_t_2) {

    /* "pysegtools/images/filters/_frangi.pyx":44
 *     cdef dbl_p pOut = <dbl_p>PyArray_DATA(out), pSigs, pDirs
 *     if return_full:
 *         sigs = PyArray_ZEROS(2, PyArray_SHAPE(im), NPY_DOUBLE, False)             # <<<<<<<<<<<<<<
 *         dirs = PyArray_ZEROS(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         pSigs = <dbl_p>PyArray_DATA(sigs); pDirs = <dbl_p>PyArray_DATA(dirs)
 */
    __pyx_t_1 = ((PyObject *)PyArray_ZEROS(2, PyArray_SHAPE(__pyx_v_im), NPY_DOUBLE, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_sigs = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pysegtools/images/filters/_frangi.pyx":45
 *     if return_full:
 *         sigs = PyArray_ZEROS(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         dirs = PyArray_ZEROS(2, PyArray_SHAPE(im), NPY_DOUBLE, False)             # <<<<<<<<<<<<<<
 *         pSigs = <dbl_p>PyArray_DATA(sigs); pDirs = <dbl_p>PyArray_DATA(dirs)
 *         vx = pDyy; vy = <dbl_p>PyArray_DATA(tmp)
 */
    __pyx_t_1 = ((PyObject *)PyArray_ZEROS(2, PyArray_SHAPE(__pyx_v_im), NPY_DOUBLE, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_dirs = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pysegtools/images/filters/_frangi.pyx":46
 *         sigs = PyArray_ZEROS(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         dirs = PyArray_ZEROS(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         pSigs = <dbl_p>PyArray_DATA(sigs); pDirs = <dbl_p>PyArray_DATA(dirs)             # <<<<<<<<<<<<<<
 *         vx = pDyy; vy = <dbl_p>PyArray_DATA(tmp)
 * 
 */
    __pyx_v_pSigs = ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p)PyArray_DATA(__pyx_v_sigs));
    __pyx_v_pDirs = ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p)PyArray_DATA(__pyx_v_dirs));

    /* "pysegtools/images/filters/_frangi.pyx":47
 *         dirs = PyArray_ZEROS(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         pSigs = <dbl_p>PyArray_DATA(sigs); pDirs = <dbl_p>PyArray_DATA(dirs)
 *         vx = pDyy; vy = <dbl_p>PyArray_DATA(tmp)             # <<<<<<<<<<<<<<
 * 
 *     # Frangi filter for all sigmas
 */
    __pyx_v_vx = __pyx_v_pDyy;
    __pyx_v_vy = ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p)PyArray_DATA(__pyx_v_tmp));

    /* "pysegtools/images/filters/_frangi.pyx":43
 *     cdef dbl_p lambda1 = pDxx, lambda2 = pDxy, vx, vy
 *     cdef dbl_p pOut = <dbl_p>PyArray_DATA(out), pSigs, pDirs
 *     if return_full:             # <<<<<<<<<<<<<<
 *         sigs = PyArray_ZEROS(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         dirs = PyArray_ZEROS(2, PyArray_SHAPE(im), NPY_DOUBLE, False)
 */
  }

  /* "pysegtools/images/filters/_frangi.pyx":50
 * 
 *     # Frangi filter for all sigmas
 *     cdef dbl sigma, lam1, lam2, Rb2, S2, V, b = 1 if black else -1             # <<<<<<<<<<<<<<
 *     beta = -1.0/(2.0*beta*beta)
 *     cdef bint c_dyn = c == 0.0
 */
  if ((__pyx_v_black != 0)) {
    __pyx_t_3 = 1.0;
  } else {
    __pyx_t_3 = -1.0;
  }
  __pyx_v_b = __pyx_t_3;

  /* "pysegtools/images/filters/_frangi.pyx":51
 *     # Frangi filter for all sigmas
 *     cdef dbl sigma, lam1, lam2, Rb2, S2, V, b = 1 if black else -1
 *     beta = -1.0/(2.0*beta*beta)             # <<<<<<<<<<<<<<
 *     cdef bint c_dyn = c == 0.0
 *     if not c_dyn: c = -1.0/(2.0*c*c)
 */
  __pyx_v_beta = (((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl)-1.0) / ((2.0 * __pyx_v_beta) * __pyx_v_beta));

  /* "pysegtools/images/filters/_frangi.pyx":52
 *     cdef dbl sigma, lam1, lam2, Rb2, S2, V, b = 1 if black else -1
 *     beta = -1.0/(2.0*beta*beta)
 *     cdef bint c_dyn = c == 0.0             # <<<<<<<<<<<<<<
 *     if not c_dyn: c = -1.0/(2.0*c*c)
 *     cdef intp i, N = PyArray_SIZE(im)
 */
  __pyx_v_c_dyn = (__pyx_v_c == 0.0);

  /* "pysegtools/images/filters/_frangi.pyx":53
 *     beta = -1.0/(2.0*beta*beta)
 *     cdef bint c_dyn = c == 0.0
 *     if not c_dyn: c = -1.0/(2.0*c*c)             # <<<<<<<<<<<<<<
 *     cdef intp i, N = PyArray_SIZE(im)
 *     cdef bint first = True
 */
  __pyx_t_2 = ((!(__pyx_v_c_dyn != 0)) != 0);
  if (__pyx_t_2) {
    __pyx_v_c = (((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl)-1.0) / ((2.0 * __pyx_v_c) * __pyx_v_c));
  }

  /* "pysegtools/images/filters/_frangi.pyx":54
 *     cdef bint c_dyn = c == 0.0
 *     if not c_dyn: c = -1.0/(2.0*c*c)
 *     cdef intp i, N = PyArray_SIZE(im)             # <<<<<<<<<<<<<<
 *     cdef bint first = True
 *     for sigma in sigmas:
 */
  __pyx_v_N = PyArray_SIZE(__pyx_v_im);

  /* "pysegtools/images/filters/_frangi.pyx":55
 *     if not c_dyn: c = -1.0/(2.0*c*c)
 *     cdef intp i, N = PyArray_SIZE(im)
 *     cdef bint first = True             # <<<<<<<<<<<<<<
 *     for sigma in sigmas:
 *         # Calculate the scaled 2D hessian
 */
  __pyx_v_first = 1;

  /* "pysegtools/images/filters/_frangi.pyx":56
 *     cdef intp i, N = PyArray_SIZE(im)
 *     cdef bint first = True
 *     for sigma in sigmas:             # <<<<<<<<<<<<<<
 *         # Calculate the scaled 2D hessian
 *         hessian2(im, sigma, Dxx, Dxy, Dyy, tmp)
 */
  if (unlikely(__pyx_v_sigmas == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 56, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_sigmas; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 56, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_3 == ((npy_double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 56, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_sigma = __pyx_t_3;

    /* "pysegtools/images/filters/_frangi.pyx":58
 *     for sigma in sigmas:
 *         # Calculate the scaled 2D hessian
 *         hessian2(im, sigma, Dxx, Dxy, Dyy, tmp)             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
    __pyx_f_10pysegtools_6images_7filters_7_frangi_hessian2(__pyx_v_im, __pyx_v_sigma, __pyx_v_Dxx, __pyx_v_Dxy, __pyx_v_Dyy, __pyx_v_tmp);

    /* "pysegtools/images/filters/_frangi.pyx":60
 *         hessian2(im, sigma, Dxx, Dxy, Dyy, tmp)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             # Calculate (abs sorted) eigenvalues and eigenvectors
 *             if return_full: eig2image(N, pDxx, pDxy, pDyy, vy)
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "pysegtools/images/filters/_frangi.pyx":62
 *         with nogil:
 *             # Calculate (abs sorted) eigenvalues and eigenvectors
 *             if return_full: eig2image(N, pDxx, pDxy, pDyy, vy)             # <<<<<<<<<<<<<<
 *             else: eigval2image(N, pDxx, pDxy, pDyy)
 * 
 */
          __pyx_t_2 = (__pyx_v_return_full != 0);
          if (__pyx_t_2) {
            __pyx_f_10pysegtools_6images_7filters_7_frangi_eig2image(__pyx_v_N, __pyx_v_pDxx, __pyx_v_pDxy, __pyx_v_pDyy, __pyx_v_vy);
            goto __pyx_L12;
          }

          /* "pysegtools/images/filters/_frangi.pyx":63
 *             # Calculate (abs sorted) eigenvalues and eigenvectors
 *             if return_full: eig2image(N, pDxx, pDxy, pDyy, vy)
 *             else: eigval2image(N, pDxx, pDxy, pDyy)             # <<<<<<<<<<<<<<
 * 
 *             # Calculate the dynamic c value if necessary
 */
          /*else*/ {
            __pyx_f_10pysegtools_6images_7filters_7_frangi_eigval2image(__pyx_v_N, __pyx_v_pDxx, __pyx_v_pDxy, __pyx_v_pDyy);
          }
          __pyx_L12:;

          /* "pysegtools/images/filters/_frangi.pyx":66
 * 
 *             # Calculate the dynamic c value if necessary
 *             if c_dyn:             # <<<<<<<<<<<<<<
 *                 c = 0.0
 *                 for i in xrange(N):
 */
          __pyx_t_2 = (__pyx_v_c_dyn != 0);
          if (__pyx_t_2) {

            /* "pysegtools/images/filters/_frangi.pyx":67
 *             # Calculate the dynamic c value if necessary
 *             if c_dyn:
 *                 c = 0.0             # <<<<<<<<<<<<<<
 *                 for i in xrange(N):
 *                     lam2 = lambda2[i]
 */
            __pyx_v_c = 0.0;

            /* "pysegtools/images/filters/_frangi.pyx":68
 *             if c_dyn:
 *                 c = 0.0
 *                 for i in xrange(N):             # <<<<<<<<<<<<<<
 *                     lam2 = lambda2[i]
 *                     if b*lam2 > 0.0:
 */
            __pyx_t_6 = __pyx_v_N;
            for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
              __pyx_v_i = __pyx_t_7;

              /* "pysegtools/images/filters/_frangi.pyx":69
 *                 c = 0.0
 *                 for i in xrange(N):
 *                     lam2 = lambda2[i]             # <<<<<<<<<<<<<<
 *                     if b*lam2 > 0.0:
 *                         lam1 = lambda1[i]
 */
              __pyx_v_lam2 = (__pyx_v_lambda2[__pyx_v_i]);

              /* "pysegtools/images/filters/_frangi.pyx":70
 *                 for i in xrange(N):
 *                     lam2 = lambda2[i]
 *                     if b*lam2 > 0.0:             # <<<<<<<<<<<<<<
 *                         lam1 = lambda1[i]
 *                         S2 = lam1*lam1 + lam2*lam2
 */
              __pyx_t_2 = (((__pyx_v_b * __pyx_v_lam2) > 0.0) != 0);
              if (__pyx_t_2) {

                /* "pysegtools/images/filters/_frangi.pyx":71
 *                     lam2 = lambda2[i]
 *                     if b*lam2 > 0.0:
 *                         lam1 = lambda1[i]             # <<<<<<<<<<<<<<
 *                         S2 = lam1*lam1 + lam2*lam2
 *                         if S2 > c: c = S2
 */
                __pyx_v_lam1 = (__pyx_v_lambda1[__pyx_v_i]);

                /* "pysegtools/images/filters/_frangi.pyx":72
 *                     if b*lam2 > 0.0:
 *                         lam1 = lambda1[i]
 *                         S2 = lam1*lam1 + lam2*lam2             # <<<<<<<<<<<<<<
 *                         if S2 > c: c = S2
 *                 c = -2.0/c
 */
                __pyx_v_S2 = ((__pyx_v_lam1 * __pyx_v_lam1) + (__pyx_v_lam2 * __pyx_v_lam2));

                /* "pysegtools/images/filters/_frangi.pyx":73
 *                         lam1 = lambda1[i]
 *                         S2 = lam1*lam1 + lam2*lam2
 *                         if S2 > c: c = S2             # <<<<<<<<<<<<<<
 *                 c = -2.0/c
 * 
 */
                __pyx_t_2 = ((__pyx_v_S2 > __pyx_v_c) != 0);
                if (__pyx_t_2) {
                  __pyx_v_c = __pyx_v_S2;
                }

                /* "pysegtools/images/filters/_frangi.pyx":70
 *                 for i in xrange(N):
 *                     lam2 = lambda2[i]
 *                     if b*lam2 > 0.0:             # <<<<<<<<<<<<<<
 *                         lam1 = lambda1[i]
 *                         S2 = lam1*lam1 + lam2*lam2
 */
              }
            }

            /* "pysegtools/images/filters/_frangi.pyx":74
 *                         S2 = lam1*lam1 + lam2*lam2
 *                         if S2 > c: c = S2
 *                 c = -2.0/c             # <<<<<<<<<<<<<<
 * 
 *             # Calculate the vesselness
 */
            __pyx_v_c = (((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl)-2.0) / __pyx_v_c);

            /* "pysegtools/images/filters/_frangi.pyx":66
 * 
 *             # Calculate the dynamic c value if necessary
 *             if c_dyn:             # <<<<<<<<<<<<<<
 *                 c = 0.0
 *                 for i in xrange(N):
 */
          }

          /* "pysegtools/images/filters/_frangi.pyx":77
 * 
 *             # Calculate the vesselness
 *             for i in xrange(N):             # <<<<<<<<<<<<<<
 *                 lam2 = lambda2[i]
 *                 if b*lam2 > 0.0:
 */
          __pyx_t_6 = __pyx_v_N;
          for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
            __pyx_v_i = __pyx_t_7;

            /* "pysegtools/images/filters/_frangi.pyx":78
 *             # Calculate the vesselness
 *             for i in xrange(N):
 *                 lam2 = lambda2[i]             # <<<<<<<<<<<<<<
 *                 if b*lam2 > 0.0:
 *                     lam1 = lambda1[i]
 */
            __pyx_v_lam2 = (__pyx_v_lambda2[__pyx_v_i]);

            /* "pysegtools/images/filters/_frangi.pyx":79
 *             for i in xrange(N):
 *                 lam2 = lambda2[i]
 *                 if b*lam2 > 0.0:             # <<<<<<<<<<<<<<
 *                     lam1 = lambda1[i]
 * 
 */
            __pyx_t_2 = (((__pyx_v_b * __pyx_v_lam2) > 0.0) != 0);
            if (__pyx_t_2) {

              /* "pysegtools/images/filters/_frangi.pyx":80
 *                 lam2 = lambda2[i]
 *                 if b*lam2 > 0.0:
 *                     lam1 = lambda1[i]             # <<<<<<<<<<<<<<
 * 
 *                     # Compute similarity measures
 */
              __pyx_v_lam1 = (__pyx_v_lambda1[__pyx_v_i]);

              /* "pysegtools/images/filters/_frangi.pyx":83
 * 
 *                     # Compute similarity measures
 *                     lam1 *= lam1; lam2 *= lam2             # <<<<<<<<<<<<<<
 *                     Rb2 =     exp(lam1/lam2*beta) # exp(-Rb^2/(2*beta^2)); Rb = lambda1 / lambda2
 *                     S2  = 1.0-exp((lam1+lam2)*c)  # 1-exp(-S^2/(2*c^2));   S = sqrt(sum(lambda_i^2))
 */
              __pyx_v_lam1 = (__pyx_v_lam1 * __pyx_v_lam1);
              __pyx_v_lam2 = (__pyx_v_lam2 * __pyx_v_lam2);

              /* "pysegtools/images/filters/_frangi.pyx":84
 *                     # Compute similarity measures
 *                     lam1 *= lam1; lam2 *= lam2
 *                     Rb2 =     exp(lam1/lam2*beta) # exp(-Rb^2/(2*beta^2)); Rb = lambda1 / lambda2             # <<<<<<<<<<<<<<
 *                     S2  = 1.0-exp((lam1+lam2)*c)  # 1-exp(-S^2/(2*c^2));   S = sqrt(sum(lambda_i^2))
 *                     V = Rb2 * S2
 */
              __pyx_v_Rb2 = exp(((__pyx_v_lam1 / __pyx_v_lam2) * __pyx_v_beta));

              /* "pysegtools/images/filters/_frangi.pyx":85
 *                     lam1 *= lam1; lam2 *= lam2
 *                     Rb2 =     exp(lam1/lam2*beta) # exp(-Rb^2/(2*beta^2)); Rb = lambda1 / lambda2
 *                     S2  = 1.0-exp((lam1+lam2)*c)  # 1-exp(-S^2/(2*c^2));   S = sqrt(sum(lambda_i^2))             # <<<<<<<<<<<<<<
 *                     V = Rb2 * S2
 * 
 */
              __pyx_v_S2 = (1.0 - exp(((__pyx_v_lam1 + __pyx_v_lam2) * __pyx_v_c)));

              /* "pysegtools/images/filters/_frangi.pyx":86
 *                     Rb2 =     exp(lam1/lam2*beta) # exp(-Rb^2/(2*beta^2)); Rb = lambda1 / lambda2
 *                     S2  = 1.0-exp((lam1+lam2)*c)  # 1-exp(-S^2/(2*c^2));   S = sqrt(sum(lambda_i^2))
 *                     V = Rb2 * S2             # <<<<<<<<<<<<<<
 * 
 *                     # If maximal, store values
 */
              __pyx_v_V = (__pyx_v_Rb2 * __pyx_v_S2);

              /* "pysegtools/images/filters/_frangi.pyx":89
 * 
 *                     # If maximal, store values
 *                     if V > pOut[i]:             # <<<<<<<<<<<<<<
 *                         pOut[i] = V
 *                         if return_full:
 */
              __pyx_t_2 = ((__pyx_v_V > (__pyx_v_pOut[__pyx_v_i])) != 0);
              if (__pyx_t_2) {

                /* "pysegtools/images/filters/_frangi.pyx":90
 *                     # If maximal, store values
 *                     if V > pOut[i]:
 *                         pOut[i] = V             # <<<<<<<<<<<<<<
 *                         if return_full:
 *                             pSigs[i] = sigma
 */
                (__pyx_v_pOut[__pyx_v_i]) = __pyx_v_V;

                /* "pysegtools/images/filters/_frangi.pyx":91
 *                     if V > pOut[i]:
 *                         pOut[i] = V
 *                         if return_full:             # <<<<<<<<<<<<<<
 *                             pSigs[i] = sigma
 *                             pDirs[i] = atan2(vy[i], vx[i])
 */
                __pyx_t_2 = (__pyx_v_return_full != 0);
                if (__pyx_t_2) {

                  /* "pysegtools/images/filters/_frangi.pyx":92
 *                         pOut[i] = V
 *                         if return_full:
 *                             pSigs[i] = sigma             # <<<<<<<<<<<<<<
 *                             pDirs[i] = atan2(vy[i], vx[i])
 *                 elif first: pOut[i] = 0
 */
                  (__pyx_v_pSigs[__pyx_v_i]) = __pyx_v_sigma;

                  /* "pysegtools/images/filters/_frangi.pyx":93
 *                         if return_full:
 *                             pSigs[i] = sigma
 *                             pDirs[i] = atan2(vy[i], vx[i])             # <<<<<<<<<<<<<<
 *                 elif first: pOut[i] = 0
 * 
 */
                  (__pyx_v_pDirs[__pyx_v_i]) = atan2((__pyx_v_vy[__pyx_v_i]), (__pyx_v_vx[__pyx_v_i]));

                  /* "pysegtools/images/filters/_frangi.pyx":91
 *                     if V > pOut[i]:
 *                         pOut[i] = V
 *                         if return_full:             # <<<<<<<<<<<<<<
 *                             pSigs[i] = sigma
 *                             pDirs[i] = atan2(vy[i], vx[i])
 */
                }

                /* "pysegtools/images/filters/_frangi.pyx":89
 * 
 *                     # If maximal, store values
 *                     if V > pOut[i]:             # <<<<<<<<<<<<<<
 *                         pOut[i] = V
 *                         if return_full:
 */
              }

              /* "pysegtools/images/filters/_frangi.pyx":79
 *             for i in xrange(N):
 *                 lam2 = lambda2[i]
 *                 if b*lam2 > 0.0:             # <<<<<<<<<<<<<<
 *                     lam1 = lambda1[i]
 * 
 */
              goto __pyx_L20;
            }

            /* "pysegtools/images/filters/_frangi.pyx":94
 *                             pSigs[i] = sigma
 *                             pDirs[i] = atan2(vy[i], vx[i])
 *                 elif first: pOut[i] = 0             # <<<<<<<<<<<<<<
 * 
 *             first = False
 */
            __pyx_t_2 = (__pyx_v_first != 0);
            if (__pyx_t_2) {
              (__pyx_v_pOut[__pyx_v_i]) = 0.0;
            }
            __pyx_L20:;
          }

          /* "pysegtools/images/filters/_frangi.pyx":96
 *                 elif first: pOut[i] = 0
 * 
 *             first = False             # <<<<<<<<<<<<<<
 * 
 *     # Return output
 */
          __pyx_v_first = 0;
        }

        /* "pysegtools/images/filters/_frangi.pyx":60
 *         hessian2(im, sigma, Dxx, Dxy, Dyy, tmp)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             # Calculate (abs sorted) eigenvalues and eigenvectors
 *             if return_full: eig2image(N, pDxx, pDxy, pDyy, vy)
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L11;
          }
          __pyx_L11:;
        }
    }

    /* "pysegtools/images/filters/_frangi.pyx":56
 *     cdef intp i, N = PyArray_SIZE(im)
 *     cdef bint first = True
 *     for sigma in sigmas:             # <<<<<<<<<<<<<<
 *         # Calculate the scaled 2D hessian
 *         hessian2(im, sigma, Dxx, Dxy, Dyy, tmp)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":99
 * 
 *     # Return output
 *     return (out,sigs,dirs) if return_full else out             # <<<<<<<<<<<<<<
 * 
 * cdef void hessian2(ndarray im, dbl sigma, ndarray Dxx, ndarray Dxy, ndarray Dyy, ndarray tmp):
 */
  __Pyx_XDECREF(__pyx_r);
  if ((__pyx_v_return_full != 0)) {
    if (unlikely(!__pyx_v_sigs)) { __Pyx_RaiseUnboundLocalError("sigs"); __PYX_ERR(0, 99, __pyx_L1_error) }
    if (unlikely(!__pyx_v_dirs)) { __Pyx_RaiseUnboundLocalError("dirs"); __PYX_ERR(0, 99, __pyx_L1_error) }
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)__pyx_v_out));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_out));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_out));
    __Pyx_INCREF(((PyObject *)__pyx_v_sigs));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_sigs));
    PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_sigs));
    __Pyx_INCREF(((PyObject *)__pyx_v_dirs));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_dirs));
    PyTuple_SET_ITEM(__pyx_t_5, 2, ((PyObject *)__pyx_v_dirs));
    __pyx_t_1 = __pyx_t_5;
    __pyx_t_5 = 0;
  } else {
    __Pyx_INCREF(((PyObject *)__pyx_v_out));
    __pyx_t_1 = ((PyObject *)__pyx_v_out);
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pysegtools/images/filters/_frangi.pyx":24
 * 
 * ########## Frangi 2D ##########
 * def frangi2(ndarray im, ndarray out, tuple sigmas, dbl beta, dbl c, bint black, bint return_full):             # <<<<<<<<<<<<<<
 *     """
 *     Internal function to compute the 2D Frangi filter according to Frangi et al (1998).
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pysegtools.images.filters._frangi.frangi2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_Dxx);
  __Pyx_XDECREF((PyObject *)__pyx_v_Dxy);
  __Pyx_XDECREF((PyObject *)__pyx_v_Dyy);
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp);
  __Pyx_XDECREF((PyObject *)__pyx_v_sigs);
  __Pyx_XDECREF((PyObject *)__pyx_v_dirs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysegtools/images/filters/_frangi.pyx":101
 *     return (out,sigs,dirs) if return_full else out
 * 
 * cdef void hessian2(ndarray im, dbl sigma, ndarray Dxx, ndarray Dxy, ndarray Dyy, ndarray tmp):             # <<<<<<<<<<<<<<
 *     """
 *     Filters an image with the 2nd derivatives of a Gaussian with parameter `sigma`. This
 */

static void __pyx_f_10pysegtools_6images_7filters_7_frangi_hessian2(PyArrayObject *__pyx_v_im, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_sigma, PyArrayObject *__pyx_v_Dxx, PyArrayObject *__pyx_v_Dxy, PyArrayObject *__pyx_v_Dyy, PyArrayObject *__pyx_v_tmp) {
  PyObject *__pyx_v_exp = NULL;
  PyObject *__pyx_v_correlate1d = NULL;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_sigma2;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_p;
  PyArrayObject *__pyx_v_i = 0;
  PyArrayObject *__pyx_v_i2 = 0;
  PyArrayObject *__pyx_v_v = 0;
  PyArrayObject *__pyx_v_uu = 0;
  PyArrayObject *__pyx_v_u = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("hessian2", 0);

  /* "pysegtools/images/filters/_frangi.pyx":133
 *     #
 *     # Not any faster or memory efficent than the Python version...
 *     from numpy import exp             # <<<<<<<<<<<<<<
 *     from scipy.ndimage import correlate1d
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_exp);
  __Pyx_GIVEREF(__pyx_n_s_exp);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_exp);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_exp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_exp = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":134
 *     # Not any faster or memory efficent than the Python version...
 *     from numpy import exp
 *     from scipy.ndimage import correlate1d             # <<<<<<<<<<<<<<
 * 
 *     cdef dbl sigma2 = sigma*sigma, p = floor(3.0*sigma+0.5)
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_correlate1d);
  __Pyx_GIVEREF(__pyx_n_s_correlate1d);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_correlate1d);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_scipy_ndimage, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_correlate1d); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_correlate1d = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":136
 *     from scipy.ndimage import correlate1d
 * 
 *     cdef dbl sigma2 = sigma*sigma, p = floor(3.0*sigma+0.5)             # <<<<<<<<<<<<<<
 *     cdef ndarray i = PyArray_Arange(p, -p-1.0, -1.0, NPY_DOUBLE), i2 = i*i
 *     cdef ndarray v = exp(-i2/(2.0*sigma2)) * (1.0/(sqrt(2.0*M_PI)*sigma2))
 */
  __pyx_v_sigma2 = (__pyx_v_sigma * __pyx_v_sigma);
  __pyx_v_p = floor(((3.0 * __pyx_v_sigma) + 0.5));

  /* "pysegtools/images/filters/_frangi.pyx":137
 * 
 *     cdef dbl sigma2 = sigma*sigma, p = floor(3.0*sigma+0.5)
 *     cdef ndarray i = PyArray_Arange(p, -p-1.0, -1.0, NPY_DOUBLE), i2 = i*i             # <<<<<<<<<<<<<<
 *     cdef ndarray v = exp(-i2/(2.0*sigma2)) * (1.0/(sqrt(2.0*M_PI)*sigma2))
 *     cdef ndarray uu = v*i,u = v*(i2-sigma2)
 */
  __pyx_t_1 = ((PyObject *)PyArray_Arange(__pyx_v_p, ((-__pyx_v_p) - 1.0), -1.0, NPY_DOUBLE)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_i = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(((PyObject *)__pyx_v_i), ((PyObject *)__pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10npy_helper_ndarray))))) __PYX_ERR(0, 137, __pyx_L1_error)
  __pyx_v_i2 = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":138
 *     cdef dbl sigma2 = sigma*sigma, p = floor(3.0*sigma+0.5)
 *     cdef ndarray i = PyArray_Arange(p, -p-1.0, -1.0, NPY_DOUBLE), i2 = i*i
 *     cdef ndarray v = exp(-i2/(2.0*sigma2)) * (1.0/(sqrt(2.0*M_PI)*sigma2))             # <<<<<<<<<<<<<<
 *     cdef ndarray uu = v*i,u = v*(i2-sigma2)
 *     correlate1d(im, uu, 0, tmp); correlate1d(tmp, uu, 1, Dxy)
 */
  __pyx_t_2 = PyNumber_Negative(((PyObject *)__pyx_v_i2)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble((2.0 * __pyx_v_sigma2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_exp);
  __pyx_t_3 = __pyx_v_exp; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 138, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble((((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl)1.0) / (sqrt((2.0 * M_PI)) * __pyx_v_sigma2))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_10npy_helper_ndarray))))) __PYX_ERR(0, 138, __pyx_L1_error)
  __pyx_v_v = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":139
 *     cdef ndarray i = PyArray_Arange(p, -p-1.0, -1.0, NPY_DOUBLE), i2 = i*i
 *     cdef ndarray v = exp(-i2/(2.0*sigma2)) * (1.0/(sqrt(2.0*M_PI)*sigma2))
 *     cdef ndarray uu = v*i,u = v*(i2-sigma2)             # <<<<<<<<<<<<<<
 *     correlate1d(im, uu, 0, tmp); correlate1d(tmp, uu, 1, Dxy)
 *     correlate1d(im, u,  0, tmp); correlate1d(tmp, v,  1, Dxx)
 */
  __pyx_t_5 = PyNumber_Multiply(((PyObject *)__pyx_v_v), ((PyObject *)__pyx_v_i)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_10npy_helper_ndarray))))) __PYX_ERR(0, 139, __pyx_L1_error)
  __pyx_v_uu = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_sigma2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyNumber_Subtract(((PyObject *)__pyx_v_i2), __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Multiply(((PyObject *)__pyx_v_v), __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_10npy_helper_ndarray))))) __PYX_ERR(0, 139, __pyx_L1_error)
  __pyx_v_u = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":140
 *     cdef ndarray v = exp(-i2/(2.0*sigma2)) * (1.0/(sqrt(2.0*M_PI)*sigma2))
 *     cdef ndarray uu = v*i,u = v*(i2-sigma2)
 *     correlate1d(im, uu, 0, tmp); correlate1d(tmp, uu, 1, Dxy)             # <<<<<<<<<<<<<<
 *     correlate1d(im, u,  0, tmp); correlate1d(tmp, v,  1, Dxx)
 *     correlate1d(im, v,  0, tmp); correlate1d(tmp, u,  1, Dyy)
 */
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_3 = __pyx_v_correlate1d; __pyx_t_1 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_1, ((PyObject *)__pyx_v_im), ((PyObject *)__pyx_v_uu), __pyx_int_0, ((PyObject *)__pyx_v_tmp)};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 4+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 140, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_1, ((PyObject *)__pyx_v_im), ((PyObject *)__pyx_v_uu), __pyx_int_0, ((PyObject *)__pyx_v_tmp)};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 4+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 140, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(4+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_im));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_im));
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, ((PyObject *)__pyx_v_im));
    __Pyx_INCREF(((PyObject *)__pyx_v_uu));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_uu));
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, ((PyObject *)__pyx_v_uu));
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_6, __pyx_int_0);
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
    PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_6, ((PyObject *)__pyx_v_tmp));
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_3 = __pyx_v_correlate1d; __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_4, ((PyObject *)__pyx_v_tmp), ((PyObject *)__pyx_v_uu), __pyx_int_1, ((PyObject *)__pyx_v_Dxy)};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 4+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 140, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_4, ((PyObject *)__pyx_v_tmp), ((PyObject *)__pyx_v_uu), __pyx_int_1, ((PyObject *)__pyx_v_Dxy)};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 4+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 140, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(4+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_6, ((PyObject *)__pyx_v_tmp));
    __Pyx_INCREF(((PyObject *)__pyx_v_uu));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_uu));
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_6, ((PyObject *)__pyx_v_uu));
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_6, __pyx_int_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_Dxy));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_Dxy));
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_6, ((PyObject *)__pyx_v_Dxy));
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":141
 *     cdef ndarray uu = v*i,u = v*(i2-sigma2)
 *     correlate1d(im, uu, 0, tmp); correlate1d(tmp, uu, 1, Dxy)
 *     correlate1d(im, u,  0, tmp); correlate1d(tmp, v,  1, Dxx)             # <<<<<<<<<<<<<<
 *     correlate1d(im, v,  0, tmp); correlate1d(tmp, u,  1, Dyy)
 * 
 */
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_3 = __pyx_v_correlate1d; __pyx_t_1 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_1, ((PyObject *)__pyx_v_im), ((PyObject *)__pyx_v_u), __pyx_int_0, ((PyObject *)__pyx_v_tmp)};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 4+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_1, ((PyObject *)__pyx_v_im), ((PyObject *)__pyx_v_u), __pyx_int_0, ((PyObject *)__pyx_v_tmp)};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 4+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(4+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_im));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_im));
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, ((PyObject *)__pyx_v_im));
    __Pyx_INCREF(((PyObject *)__pyx_v_u));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_u));
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, ((PyObject *)__pyx_v_u));
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_6, __pyx_int_0);
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
    PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_6, ((PyObject *)__pyx_v_tmp));
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_3 = __pyx_v_correlate1d; __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_4, ((PyObject *)__pyx_v_tmp), ((PyObject *)__pyx_v_v), __pyx_int_1, ((PyObject *)__pyx_v_Dxx)};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 4+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_4, ((PyObject *)__pyx_v_tmp), ((PyObject *)__pyx_v_v), __pyx_int_1, ((PyObject *)__pyx_v_Dxx)};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 4+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(4+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_6, ((PyObject *)__pyx_v_tmp));
    __Pyx_INCREF(((PyObject *)__pyx_v_v));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_v));
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_6, ((PyObject *)__pyx_v_v));
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_6, __pyx_int_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_Dxx));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_Dxx));
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_6, ((PyObject *)__pyx_v_Dxx));
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":142
 *     correlate1d(im, uu, 0, tmp); correlate1d(tmp, uu, 1, Dxy)
 *     correlate1d(im, u,  0, tmp); correlate1d(tmp, v,  1, Dxx)
 *     correlate1d(im, v,  0, tmp); correlate1d(tmp, u,  1, Dyy)             # <<<<<<<<<<<<<<
 * 
 * cdef void eigval2image(intp N, dbl_p Dxx, dbl_p Dxy, dbl_p Dyy) nogil:
 */
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_3 = __pyx_v_correlate1d; __pyx_t_1 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_1, ((PyObject *)__pyx_v_im), ((PyObject *)__pyx_v_v), __pyx_int_0, ((PyObject *)__pyx_v_tmp)};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 4+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_1, ((PyObject *)__pyx_v_im), ((PyObject *)__pyx_v_v), __pyx_int_0, ((PyObject *)__pyx_v_tmp)};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 4+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(4+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_im));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_im));
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, ((PyObject *)__pyx_v_im));
    __Pyx_INCREF(((PyObject *)__pyx_v_v));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_v));
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, ((PyObject *)__pyx_v_v));
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_6, __pyx_int_0);
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
    PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_6, ((PyObject *)__pyx_v_tmp));
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_3 = __pyx_v_correlate1d; __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_4, ((PyObject *)__pyx_v_tmp), ((PyObject *)__pyx_v_u), __pyx_int_1, ((PyObject *)__pyx_v_Dyy)};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 4+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_4, ((PyObject *)__pyx_v_tmp), ((PyObject *)__pyx_v_u), __pyx_int_1, ((PyObject *)__pyx_v_Dyy)};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 4+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(4+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_6, ((PyObject *)__pyx_v_tmp));
    __Pyx_INCREF(((PyObject *)__pyx_v_u));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_u));
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_6, ((PyObject *)__pyx_v_u));
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_6, __pyx_int_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_Dyy));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_Dyy));
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_6, ((PyObject *)__pyx_v_Dyy));
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":101
 *     return (out,sigs,dirs) if return_full else out
 * 
 * cdef void hessian2(ndarray im, dbl sigma, ndarray Dxx, ndarray Dxy, ndarray Dyy, ndarray tmp):             # <<<<<<<<<<<<<<
 *     """
 *     Filters an image with the 2nd derivatives of a Gaussian with parameter `sigma`. This
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("pysegtools.images.filters._frangi.hessian2", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_exp);
  __Pyx_XDECREF(__pyx_v_correlate1d);
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XDECREF((PyObject *)__pyx_v_i2);
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XDECREF((PyObject *)__pyx_v_uu);
  __Pyx_XDECREF((PyObject *)__pyx_v_u);
  __Pyx_RefNannyFinishContext();
}

/* "pysegtools/images/filters/_frangi.pyx":144
 *     correlate1d(im, v,  0, tmp); correlate1d(tmp, u,  1, Dyy)
 * 
 * cdef void eigval2image(intp N, dbl_p Dxx, dbl_p Dxy, dbl_p Dyy) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Calculate the eigenvalues from the Hessian matrix of an image, sorted by absolute value.
 */

static void __pyx_f_10pysegtools_6images_7filters_7_frangi_eigval2image(__pyx_t_10npy_helper_intp __pyx_v_N, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_Dxx, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_Dxy, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_Dyy) {
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_summ;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_diff;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_tmp;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_mu1;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_mu2;
  __pyx_t_10npy_helper_intp __pyx_v_i;
  __pyx_t_10npy_helper_intp __pyx_t_1;
  __pyx_t_10npy_helper_intp __pyx_t_2;
  int __pyx_t_3;

  /* "pysegtools/images/filters/_frangi.pyx":160
 *     cdef dbl summ, diff, tmp, mu1, mu2
 *     cdef intp i
 *     for i in xrange(N):             # <<<<<<<<<<<<<<
 *         summ = Dxx[i] + Dyy[i]
 *         diff = Dxx[i] - Dyy[i]
 */
  __pyx_t_1 = __pyx_v_N;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "pysegtools/images/filters/_frangi.pyx":161
 *     cdef intp i
 *     for i in xrange(N):
 *         summ = Dxx[i] + Dyy[i]             # <<<<<<<<<<<<<<
 *         diff = Dxx[i] - Dyy[i]
 *         tmp = sqrt(diff*diff + 4*Dxy[i]*Dxy[i])
 */
    __pyx_v_summ = ((__pyx_v_Dxx[__pyx_v_i]) + (__pyx_v_Dyy[__pyx_v_i]));

    /* "pysegtools/images/filters/_frangi.pyx":162
 *     for i in xrange(N):
 *         summ = Dxx[i] + Dyy[i]
 *         diff = Dxx[i] - Dyy[i]             # <<<<<<<<<<<<<<
 *         tmp = sqrt(diff*diff + 4*Dxy[i]*Dxy[i])
 * 
 */
    __pyx_v_diff = ((__pyx_v_Dxx[__pyx_v_i]) - (__pyx_v_Dyy[__pyx_v_i]));

    /* "pysegtools/images/filters/_frangi.pyx":163
 *         summ = Dxx[i] + Dyy[i]
 *         diff = Dxx[i] - Dyy[i]
 *         tmp = sqrt(diff*diff + 4*Dxy[i]*Dxy[i])             # <<<<<<<<<<<<<<
 * 
 *         # Compute the eigenvalues
 */
    __pyx_v_tmp = sqrt(((__pyx_v_diff * __pyx_v_diff) + ((4.0 * (__pyx_v_Dxy[__pyx_v_i])) * (__pyx_v_Dxy[__pyx_v_i]))));

    /* "pysegtools/images/filters/_frangi.pyx":166
 * 
 *         # Compute the eigenvalues
 *         mu1 = 0.5*(summ + tmp) # mu1 = (Dxx + Dyy + sqrt((Dxx-Dyy)^2+4*Dxy^2)) / 2             # <<<<<<<<<<<<<<
 *         mu2 = 0.5*(summ - tmp) # mu2 = (Dxx + Dyy - sqrt((Dxx-Dyy)^2+4*Dxy^2)) / 2
 * 
 */
    __pyx_v_mu1 = (0.5 * (__pyx_v_summ + __pyx_v_tmp));

    /* "pysegtools/images/filters/_frangi.pyx":167
 *         # Compute the eigenvalues
 *         mu1 = 0.5*(summ + tmp) # mu1 = (Dxx + Dyy + sqrt((Dxx-Dyy)^2+4*Dxy^2)) / 2
 *         mu2 = 0.5*(summ - tmp) # mu2 = (Dxx + Dyy - sqrt((Dxx-Dyy)^2+4*Dxy^2)) / 2             # <<<<<<<<<<<<<<
 * 
 *         # Sort eigenvalues by absolute value abs(eig1) < abs(eig2)
 */
    __pyx_v_mu2 = (0.5 * (__pyx_v_summ - __pyx_v_tmp));

    /* "pysegtools/images/filters/_frangi.pyx":170
 * 
 *         # Sort eigenvalues by absolute value abs(eig1) < abs(eig2)
 *         if fabs(mu1) > fabs(mu2): Dxx[i] = mu2; Dxy[i] = mu1             # <<<<<<<<<<<<<<
 *         else:                     Dxx[i] = mu1; Dxy[i] = mu2
 * 
 */
    __pyx_t_3 = ((fabs(__pyx_v_mu1) > fabs(__pyx_v_mu2)) != 0);
    if (__pyx_t_3) {
      (__pyx_v_Dxx[__pyx_v_i]) = __pyx_v_mu2;
      (__pyx_v_Dxy[__pyx_v_i]) = __pyx_v_mu1;
      goto __pyx_L5;
    }

    /* "pysegtools/images/filters/_frangi.pyx":171
 *         # Sort eigenvalues by absolute value abs(eig1) < abs(eig2)
 *         if fabs(mu1) > fabs(mu2): Dxx[i] = mu2; Dxy[i] = mu1
 *         else:                     Dxx[i] = mu1; Dxy[i] = mu2             # <<<<<<<<<<<<<<
 * 
 * cdef void eig2image(intp N, dbl_p Dxx, dbl_p Dxy, dbl_p Dyy, dbl_p vy) nogil:
 */
    /*else*/ {
      (__pyx_v_Dxx[__pyx_v_i]) = __pyx_v_mu1;
      (__pyx_v_Dxy[__pyx_v_i]) = __pyx_v_mu2;
    }
    __pyx_L5:;
  }

  /* "pysegtools/images/filters/_frangi.pyx":144
 *     correlate1d(im, v,  0, tmp); correlate1d(tmp, u,  1, Dyy)
 * 
 * cdef void eigval2image(intp N, dbl_p Dxx, dbl_p Dxy, dbl_p Dyy) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Calculate the eigenvalues from the Hessian matrix of an image, sorted by absolute value.
 */

  /* function exit code */
}

/* "pysegtools/images/filters/_frangi.pyx":173
 *         else:                     Dxx[i] = mu1; Dxy[i] = mu2
 * 
 * cdef void eig2image(intp N, dbl_p Dxx, dbl_p Dxy, dbl_p Dyy, dbl_p vy) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Calculate the eigenvalues and eigenvectors from the Hessian matrixof an image, sorted by
 */

static void __pyx_f_10pysegtools_6images_7filters_7_frangi_eig2image(__pyx_t_10npy_helper_intp __pyx_v_N, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_Dxx, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_Dxy, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_Dyy, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_vy) {
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_summ;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_diff;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_tmp;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_mag;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_mu1;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_mu2;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_v2x;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_v2y;
  __pyx_t_10npy_helper_intp __pyx_v_i;
  __pyx_t_10npy_helper_intp __pyx_t_1;
  __pyx_t_10npy_helper_intp __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "pysegtools/images/filters/_frangi.pyx":192
 *     cdef dbl summ, diff, tmp, mag, mu1, mu2, v2x, v2y
 *     cdef intp i
 *     for i in xrange(N):             # <<<<<<<<<<<<<<
 *         summ = Dxx[i] + Dyy[i]
 *         diff = Dxx[i] - Dyy[i]
 */
  __pyx_t_1 = __pyx_v_N;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "pysegtools/images/filters/_frangi.pyx":193
 *     cdef intp i
 *     for i in xrange(N):
 *         summ = Dxx[i] + Dyy[i]             # <<<<<<<<<<<<<<
 *         diff = Dxx[i] - Dyy[i]
 *         tmp = sqrt(diff*diff + 4.0*Dxy[i]*Dxy[i])
 */
    __pyx_v_summ = ((__pyx_v_Dxx[__pyx_v_i]) + (__pyx_v_Dyy[__pyx_v_i]));

    /* "pysegtools/images/filters/_frangi.pyx":194
 *     for i in xrange(N):
 *         summ = Dxx[i] + Dyy[i]
 *         diff = Dxx[i] - Dyy[i]             # <<<<<<<<<<<<<<
 *         tmp = sqrt(diff*diff + 4.0*Dxy[i]*Dxy[i])
 * 
 */
    __pyx_v_diff = ((__pyx_v_Dxx[__pyx_v_i]) - (__pyx_v_Dyy[__pyx_v_i]));

    /* "pysegtools/images/filters/_frangi.pyx":195
 *         summ = Dxx[i] + Dyy[i]
 *         diff = Dxx[i] - Dyy[i]
 *         tmp = sqrt(diff*diff + 4.0*Dxy[i]*Dxy[i])             # <<<<<<<<<<<<<<
 * 
 *         # Compute the eigenvalues
 */
    __pyx_v_tmp = sqrt(((__pyx_v_diff * __pyx_v_diff) + ((4.0 * (__pyx_v_Dxy[__pyx_v_i])) * (__pyx_v_Dxy[__pyx_v_i]))));

    /* "pysegtools/images/filters/_frangi.pyx":198
 * 
 *         # Compute the eigenvalues
 *         mu1 = 0.5*(summ + tmp) # mu1 = (Dxx + Dyy + sqrt((Dxx-Dyy)^2+4*Dxy^2)) / 2             # <<<<<<<<<<<<<<
 *         mu2 = 0.5*(summ - tmp) # mu2 = (Dxx + Dyy - sqrt((Dxx-Dyy)^2+4*Dxy^2)) / 2
 * 
 */
    __pyx_v_mu1 = (0.5 * (__pyx_v_summ + __pyx_v_tmp));

    /* "pysegtools/images/filters/_frangi.pyx":199
 *         # Compute the eigenvalues
 *         mu1 = 0.5*(summ + tmp) # mu1 = (Dxx + Dyy + sqrt((Dxx-Dyy)^2+4*Dxy^2)) / 2
 *         mu2 = 0.5*(summ - tmp) # mu2 = (Dxx + Dyy - sqrt((Dxx-Dyy)^2+4*Dxy^2)) / 2             # <<<<<<<<<<<<<<
 * 
 *         # Compute and normalize the eigenvectors
 */
    __pyx_v_mu2 = (0.5 * (__pyx_v_summ - __pyx_v_tmp));

    /* "pysegtools/images/filters/_frangi.pyx":202
 * 
 *         # Compute and normalize the eigenvectors
 *         v2x = 2.0*Dxy[i] # v2x = 2 * Dxy             # <<<<<<<<<<<<<<
 *         v2y = tmp - diff # v2y = sqrt((Dxx-Dyy)^2+4*Dxy^2)) - Dxx + Dyy
 *         if v2x != 0.0 and v2y != 0.0:
 */
    __pyx_v_v2x = (2.0 * (__pyx_v_Dxy[__pyx_v_i]));

    /* "pysegtools/images/filters/_frangi.pyx":203
 *         # Compute and normalize the eigenvectors
 *         v2x = 2.0*Dxy[i] # v2x = 2 * Dxy
 *         v2y = tmp - diff # v2y = sqrt((Dxx-Dyy)^2+4*Dxy^2)) - Dxx + Dyy             # <<<<<<<<<<<<<<
 *         if v2x != 0.0 and v2y != 0.0:
 *             mag = sqrt(v2x*v2x + v2y*v2y)
 */
    __pyx_v_v2y = (__pyx_v_tmp - __pyx_v_diff);

    /* "pysegtools/images/filters/_frangi.pyx":204
 *         v2x = 2.0*Dxy[i] # v2x = 2 * Dxy
 *         v2y = tmp - diff # v2y = sqrt((Dxx-Dyy)^2+4*Dxy^2)) - Dxx + Dyy
 *         if v2x != 0.0 and v2y != 0.0:             # <<<<<<<<<<<<<<
 *             mag = sqrt(v2x*v2x + v2y*v2y)
 *             v2x /= mag
 */
    __pyx_t_4 = ((__pyx_v_v2x != 0.0) != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_4 = ((__pyx_v_v2y != 0.0) != 0);
    __pyx_t_3 = __pyx_t_4;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_3) {

      /* "pysegtools/images/filters/_frangi.pyx":205
 *         v2y = tmp - diff # v2y = sqrt((Dxx-Dyy)^2+4*Dxy^2)) - Dxx + Dyy
 *         if v2x != 0.0 and v2y != 0.0:
 *             mag = sqrt(v2x*v2x + v2y*v2y)             # <<<<<<<<<<<<<<
 *             v2x /= mag
 *             v2y /= mag
 */
      __pyx_v_mag = sqrt(((__pyx_v_v2x * __pyx_v_v2x) + (__pyx_v_v2y * __pyx_v_v2y)));

      /* "pysegtools/images/filters/_frangi.pyx":206
 *         if v2x != 0.0 and v2y != 0.0:
 *             mag = sqrt(v2x*v2x + v2y*v2y)
 *             v2x /= mag             # <<<<<<<<<<<<<<
 *             v2y /= mag
 * 
 */
      __pyx_v_v2x = (__pyx_v_v2x / __pyx_v_mag);

      /* "pysegtools/images/filters/_frangi.pyx":207
 *             mag = sqrt(v2x*v2x + v2y*v2y)
 *             v2x /= mag
 *             v2y /= mag             # <<<<<<<<<<<<<<
 * 
 *         # Sort eigenvalues by absolute value abs(eig1) < abs(eig2)
 */
      __pyx_v_v2y = (__pyx_v_v2y / __pyx_v_mag);

      /* "pysegtools/images/filters/_frangi.pyx":204
 *         v2x = 2.0*Dxy[i] # v2x = 2 * Dxy
 *         v2y = tmp - diff # v2y = sqrt((Dxx-Dyy)^2+4*Dxy^2)) - Dxx + Dyy
 *         if v2x != 0.0 and v2y != 0.0:             # <<<<<<<<<<<<<<
 *             mag = sqrt(v2x*v2x + v2y*v2y)
 *             v2x /= mag
 */
    }

    /* "pysegtools/images/filters/_frangi.pyx":211
 *         # Sort eigenvalues by absolute value abs(eig1) < abs(eig2)
 *         # Also, the eigenvectors are orthogonal
 *         if fabs(mu1) > fabs(mu2):             # <<<<<<<<<<<<<<
 *             Dxx[i] = mu2; Dxy[i] = mu1; Dyy[i] = v2y; vy[i] =  v2x
 *         else:
 */
    __pyx_t_3 = ((fabs(__pyx_v_mu1) > fabs(__pyx_v_mu2)) != 0);
    if (__pyx_t_3) {

      /* "pysegtools/images/filters/_frangi.pyx":212
 *         # Also, the eigenvectors are orthogonal
 *         if fabs(mu1) > fabs(mu2):
 *             Dxx[i] = mu2; Dxy[i] = mu1; Dyy[i] = v2y; vy[i] =  v2x             # <<<<<<<<<<<<<<
 *         else:
 *             Dxx[i] = mu1; Dxy[i] = mu2; Dyy[i] = v2x; vy[i] = -v2y
 */
      (__pyx_v_Dxx[__pyx_v_i]) = __pyx_v_mu2;
      (__pyx_v_Dxy[__pyx_v_i]) = __pyx_v_mu1;
      (__pyx_v_Dyy[__pyx_v_i]) = __pyx_v_v2y;
      (__pyx_v_vy[__pyx_v_i]) = __pyx_v_v2x;

      /* "pysegtools/images/filters/_frangi.pyx":211
 *         # Sort eigenvalues by absolute value abs(eig1) < abs(eig2)
 *         # Also, the eigenvectors are orthogonal
 *         if fabs(mu1) > fabs(mu2):             # <<<<<<<<<<<<<<
 *             Dxx[i] = mu2; Dxy[i] = mu1; Dyy[i] = v2y; vy[i] =  v2x
 *         else:
 */
      goto __pyx_L8;
    }

    /* "pysegtools/images/filters/_frangi.pyx":214
 *             Dxx[i] = mu2; Dxy[i] = mu1; Dyy[i] = v2y; vy[i] =  v2x
 *         else:
 *             Dxx[i] = mu1; Dxy[i] = mu2; Dyy[i] = v2x; vy[i] = -v2y             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      (__pyx_v_Dxx[__pyx_v_i]) = __pyx_v_mu1;
      (__pyx_v_Dxy[__pyx_v_i]) = __pyx_v_mu2;
      (__pyx_v_Dyy[__pyx_v_i]) = __pyx_v_v2x;
      (__pyx_v_vy[__pyx_v_i]) = (-__pyx_v_v2y);
    }
    __pyx_L8:;
  }

  /* "pysegtools/images/filters/_frangi.pyx":173
 *         else:                     Dxx[i] = mu1; Dxy[i] = mu2
 * 
 * cdef void eig2image(intp N, dbl_p Dxx, dbl_p Dxy, dbl_p Dyy, dbl_p vy) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Calculate the eigenvalues and eigenvectors from the Hessian matrixof an image, sorted by
 */

  /* function exit code */
}

/* "pysegtools/images/filters/_frangi.pyx":218
 * 
 * ########## Frangi 3D ##########
 * def frangi3(ndarray im, ndarray out, tuple sigmas, dbl alpha, dbl beta, dbl c, bint black, bint return_full):             # <<<<<<<<<<<<<<
 *     """
 *     Internal function to compute the 3D Frangi filter according to Frangi et al (1998).
 */

/* Python wrapper */
static PyObject *__pyx_pw_10pysegtools_6images_7filters_7_frangi_3frangi3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10pysegtools_6images_7filters_7_frangi_2frangi3[] = "\n    Internal function to compute the 3D Frangi filter according to Frangi et al (1998).\n    \n    See frangi.frangi3 for more details. A few differences in the signature are that all arguments\n    are required and a value of 0.0 is used for c to indicate a dynamic value.\n    \n    Written by Jeffrey Bush (NCMIR, 2016)\n    Adapted from the MATLAB version by D. Kroon (2009)\n    ";
static PyMethodDef __pyx_mdef_10pysegtools_6images_7filters_7_frangi_3frangi3 = {"frangi3", (PyCFunction)__pyx_pw_10pysegtools_6images_7filters_7_frangi_3frangi3, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10pysegtools_6images_7filters_7_frangi_2frangi3};
static PyObject *__pyx_pw_10pysegtools_6images_7filters_7_frangi_3frangi3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_im = 0;
  PyArrayObject *__pyx_v_out = 0;
  PyObject *__pyx_v_sigmas = 0;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_alpha;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_beta;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_c;
  int __pyx_v_black;
  int __pyx_v_return_full;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("frangi3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_im,&__pyx_n_s_out,&__pyx_n_s_sigmas,&__pyx_n_s_alpha,&__pyx_n_s_beta,&__pyx_n_s_c,&__pyx_n_s_black,&__pyx_n_s_return_full,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_im)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("frangi3", 1, 8, 8, 1); __PYX_ERR(0, 218, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sigmas)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("frangi3", 1, 8, 8, 2); __PYX_ERR(0, 218, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("frangi3", 1, 8, 8, 3); __PYX_ERR(0, 218, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("frangi3", 1, 8, 8, 4); __PYX_ERR(0, 218, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("frangi3", 1, 8, 8, 5); __PYX_ERR(0, 218, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_black)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("frangi3", 1, 8, 8, 6); __PYX_ERR(0, 218, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_return_full)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("frangi3", 1, 8, 8, 7); __PYX_ERR(0, 218, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "frangi3") < 0)) __PYX_ERR(0, 218, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_im = ((PyArrayObject *)values[0]);
    __pyx_v_out = ((PyArrayObject *)values[1]);
    __pyx_v_sigmas = ((PyObject*)values[2]);
    __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_alpha == ((npy_double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 218, __pyx_L3_error)
    __pyx_v_beta = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_beta == ((npy_double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 218, __pyx_L3_error)
    __pyx_v_c = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_c == ((npy_double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 218, __pyx_L3_error)
    __pyx_v_black = __Pyx_PyObject_IsTrue(values[6]); if (unlikely((__pyx_v_black == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 218, __pyx_L3_error)
    __pyx_v_return_full = __Pyx_PyObject_IsTrue(values[7]); if (unlikely((__pyx_v_return_full == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 218, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("frangi3", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 218, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysegtools.images.filters._frangi.frangi3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_im), __pyx_ptype_10npy_helper_ndarray, 1, "im", 0))) __PYX_ERR(0, 218, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_10npy_helper_ndarray, 1, "out", 0))) __PYX_ERR(0, 218, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sigmas), (&PyTuple_Type), 1, "sigmas", 1))) __PYX_ERR(0, 218, __pyx_L1_error)
  __pyx_r = __pyx_pf_10pysegtools_6images_7filters_7_frangi_2frangi3(__pyx_self, __pyx_v_im, __pyx_v_out, __pyx_v_sigmas, __pyx_v_alpha, __pyx_v_beta, __pyx_v_c, __pyx_v_black, __pyx_v_return_full);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10pysegtools_6images_7filters_7_frangi_2frangi3(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_im, PyArrayObject *__pyx_v_out, PyObject *__pyx_v_sigmas, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_alpha, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_beta, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_c, int __pyx_v_black, int __pyx_v_return_full) {
  PyArrayObject *__pyx_v_Dxx = 0;
  PyArrayObject *__pyx_v_Dxy = 0;
  PyArrayObject *__pyx_v_Dxz = 0;
  PyArrayObject *__pyx_v_Dyy = 0;
  PyArrayObject *__pyx_v_Dyz = 0;
  PyArrayObject *__pyx_v_Dzz = 0;
  PyArrayObject *__pyx_v_tmp = 0;
  PyArrayObject *__pyx_v_sigs = 0;
  PyArrayObject *__pyx_v_vecx = 0;
  PyArrayObject *__pyx_v_vecy = 0;
  PyArrayObject *__pyx_v_vecz = 0;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_pDxx;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_pDxy;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_pDxz;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_pDyy;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_pDyz;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_pDzz;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_lambda1;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_lambda2;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_lambda3;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_vx;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_vy;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_vz;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_pOut;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_pSigs;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_pVecX;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_pVecY;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_pVecZ;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_sigma;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_lam1;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_lam2;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_lam3;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_lam23;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_Ra2;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_Rb2;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_S2;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_V;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_b;
  int __pyx_v_c_dyn;
  __pyx_t_10npy_helper_intp __pyx_v_i;
  __pyx_t_10npy_helper_intp __pyx_v_N;
  int __pyx_v_first;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_opt_args_10pysegtools_6images_7filters_7_frangi_eig3volume __pyx_t_6;
  __pyx_t_10npy_helper_intp __pyx_t_7;
  __pyx_t_10npy_helper_intp __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("frangi3", 0);

  /* "pysegtools/images/filters/_frangi.pyx":230
 *     # Allocate arrays: 7 temporaries and possibly 4 outputs
 *     cdef ndarray Dxx, Dxy, Dxz, Dyy, Dyz, Dzz, tmp, sigs, vecx, vecy, vecz
 *     Dxx = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)             # <<<<<<<<<<<<<<
 *     Dxy = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     Dxz = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 */
  __pyx_t_1 = ((PyObject *)PyArray_EMPTY(3, PyArray_SHAPE(__pyx_v_im), NPY_DOUBLE, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_Dxx = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":231
 *     cdef ndarray Dxx, Dxy, Dxz, Dyy, Dyz, Dzz, tmp, sigs, vecx, vecy, vecz
 *     Dxx = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     Dxy = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)             # <<<<<<<<<<<<<<
 *     Dxz = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     Dyy = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 */
  __pyx_t_1 = ((PyObject *)PyArray_EMPTY(3, PyArray_SHAPE(__pyx_v_im), NPY_DOUBLE, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_Dxy = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":232
 *     Dxx = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     Dxy = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     Dxz = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)             # <<<<<<<<<<<<<<
 *     Dyy = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     Dyz = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 */
  __pyx_t_1 = ((PyObject *)PyArray_EMPTY(3, PyArray_SHAPE(__pyx_v_im), NPY_DOUBLE, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_Dxz = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":233
 *     Dxy = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     Dxz = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     Dyy = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)             # <<<<<<<<<<<<<<
 *     Dyz = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     Dzz = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 */
  __pyx_t_1 = ((PyObject *)PyArray_EMPTY(3, PyArray_SHAPE(__pyx_v_im), NPY_DOUBLE, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_Dyy = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":234
 *     Dxz = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     Dyy = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     Dyz = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)             # <<<<<<<<<<<<<<
 *     Dzz = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     tmp = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 */
  __pyx_t_1 = ((PyObject *)PyArray_EMPTY(3, PyArray_SHAPE(__pyx_v_im), NPY_DOUBLE, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_Dyz = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":235
 *     Dyy = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     Dyz = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     Dzz = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)             # <<<<<<<<<<<<<<
 *     tmp = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     cdef dbl_p pDxx = <dbl_p>PyArray_DATA(Dxx), pDxy = <dbl_p>PyArray_DATA(Dxy), pDxz = <dbl_p>PyArray_DATA(Dxz)
 */
  __pyx_t_1 = ((PyObject *)PyArray_EMPTY(3, PyArray_SHAPE(__pyx_v_im), NPY_DOUBLE, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_Dzz = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":236
 *     Dyz = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     Dzz = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     tmp = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)             # <<<<<<<<<<<<<<
 *     cdef dbl_p pDxx = <dbl_p>PyArray_DATA(Dxx), pDxy = <dbl_p>PyArray_DATA(Dxy), pDxz = <dbl_p>PyArray_DATA(Dxz)
 *     cdef dbl_p pDyy = <dbl_p>PyArray_DATA(Dyy), pDyz = <dbl_p>PyArray_DATA(Dyz), pDzz = <dbl_p>PyArray_DATA(Dzz)
 */
  __pyx_t_1 = ((PyObject *)PyArray_EMPTY(3, PyArray_SHAPE(__pyx_v_im), NPY_DOUBLE, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tmp = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":237
 *     Dzz = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     tmp = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     cdef dbl_p pDxx = <dbl_p>PyArray_DATA(Dxx), pDxy = <dbl_p>PyArray_DATA(Dxy), pDxz = <dbl_p>PyArray_DATA(Dxz)             # <<<<<<<<<<<<<<
 *     cdef dbl_p pDyy = <dbl_p>PyArray_DATA(Dyy), pDyz = <dbl_p>PyArray_DATA(Dyz), pDzz = <dbl_p>PyArray_DATA(Dzz)
 *     cdef dbl_p lambda1 = pDxx, lambda2 = pDxy, lambda3 = pDxz, vx, vy, vz
 */
  __pyx_v_pDxx = ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p)PyArray_DATA(__pyx_v_Dxx));
  __pyx_v_pDxy = ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p)PyArray_DATA(__pyx_v_Dxy));
  __pyx_v_pDxz = ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p)PyArray_DATA(__pyx_v_Dxz));

  /* "pysegtools/images/filters/_frangi.pyx":238
 *     tmp = PyArray_EMPTY(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *     cdef dbl_p pDxx = <dbl_p>PyArray_DATA(Dxx), pDxy = <dbl_p>PyArray_DATA(Dxy), pDxz = <dbl_p>PyArray_DATA(Dxz)
 *     cdef dbl_p pDyy = <dbl_p>PyArray_DATA(Dyy), pDyz = <dbl_p>PyArray_DATA(Dyz), pDzz = <dbl_p>PyArray_DATA(Dzz)             # <<<<<<<<<<<<<<
 *     cdef dbl_p lambda1 = pDxx, lambda2 = pDxy, lambda3 = pDxz, vx, vy, vz
 *     cdef dbl_p pOut = <dbl_p>PyArray_DATA(out), pSigs, pVecX, pVecY, pVecZ
 */
  __pyx_v_pDyy = ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p)PyArray_DATA(__pyx_v_Dyy));
  __pyx_v_pDyz = ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p)PyArray_DATA(__pyx_v_Dyz));
  __pyx_v_pDzz = ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p)PyArray_DATA(__pyx_v_Dzz));

  /* "pysegtools/images/filters/_frangi.pyx":239
 *     cdef dbl_p pDxx = <dbl_p>PyArray_DATA(Dxx), pDxy = <dbl_p>PyArray_DATA(Dxy), pDxz = <dbl_p>PyArray_DATA(Dxz)
 *     cdef dbl_p pDyy = <dbl_p>PyArray_DATA(Dyy), pDyz = <dbl_p>PyArray_DATA(Dyz), pDzz = <dbl_p>PyArray_DATA(Dzz)
 *     cdef dbl_p lambda1 = pDxx, lambda2 = pDxy, lambda3 = pDxz, vx, vy, vz             # <<<<<<<<<<<<<<
 *     cdef dbl_p pOut = <dbl_p>PyArray_DATA(out), pSigs, pVecX, pVecY, pVecZ
 *     if return_full:
 */
  __pyx_v_lambda1 = __pyx_v_pDxx;
  __pyx_v_lambda2 = __pyx_v_pDxy;
  __pyx_v_lambda3 = __pyx_v_pDxz;

  /* "pysegtools/images/filters/_frangi.pyx":240
 *     cdef dbl_p pDyy = <dbl_p>PyArray_DATA(Dyy), pDyz = <dbl_p>PyArray_DATA(Dyz), pDzz = <dbl_p>PyArray_DATA(Dzz)
 *     cdef dbl_p lambda1 = pDxx, lambda2 = pDxy, lambda3 = pDxz, vx, vy, vz
 *     cdef dbl_p pOut = <dbl_p>PyArray_DATA(out), pSigs, pVecX, pVecY, pVecZ             # <<<<<<<<<<<<<<
 *     if return_full:
 *         sigs = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 */
  __pyx_v_pOut = ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p)PyArray_DATA(__pyx_v_out));

  /* "pysegtools/images/filters/_frangi.pyx":241
 *     cdef dbl_p lambda1 = pDxx, lambda2 = pDxy, lambda3 = pDxz, vx, vy, vz
 *     cdef dbl_p pOut = <dbl_p>PyArray_DATA(out), pSigs, pVecX, pVecY, pVecZ
 *     if return_full:             # <<<<<<<<<<<<<<
 *         sigs = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         vecx = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 */
  __pyx_t_2 = (__pyx_v_return_full != 0);
  if (__pyx_t_2) {

    /* "pysegtools/images/filters/_frangi.pyx":242
 *     cdef dbl_p pOut = <dbl_p>PyArray_DATA(out), pSigs, pVecX, pVecY, pVecZ
 *     if return_full:
 *         sigs = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)             # <<<<<<<<<<<<<<
 *         vecx = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         vecy = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 */
    __pyx_t_1 = ((PyObject *)PyArray_ZEROS(3, PyArray_SHAPE(__pyx_v_im), NPY_DOUBLE, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_sigs = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pysegtools/images/filters/_frangi.pyx":243
 *     if return_full:
 *         sigs = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         vecx = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)             # <<<<<<<<<<<<<<
 *         vecy = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         vecz = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 */
    __pyx_t_1 = ((PyObject *)PyArray_ZEROS(3, PyArray_SHAPE(__pyx_v_im), NPY_DOUBLE, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_vecx = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pysegtools/images/filters/_frangi.pyx":244
 *         sigs = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         vecx = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         vecy = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)             # <<<<<<<<<<<<<<
 *         vecz = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         pSigs = <dbl_p>PyArray_DATA(sigs); pVecX = <dbl_p>PyArray_DATA(vecx)
 */
    __pyx_t_1 = ((PyObject *)PyArray_ZEROS(3, PyArray_SHAPE(__pyx_v_im), NPY_DOUBLE, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_vecy = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pysegtools/images/filters/_frangi.pyx":245
 *         vecx = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         vecy = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         vecz = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)             # <<<<<<<<<<<<<<
 *         pSigs = <dbl_p>PyArray_DATA(sigs); pVecX = <dbl_p>PyArray_DATA(vecx)
 *         pVecY = <dbl_p>PyArray_DATA(vecy); pVecZ = <dbl_p>PyArray_DATA(vecz)
 */
    __pyx_t_1 = ((PyObject *)PyArray_ZEROS(3, PyArray_SHAPE(__pyx_v_im), NPY_DOUBLE, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_vecz = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pysegtools/images/filters/_frangi.pyx":246
 *         vecy = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         vecz = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         pSigs = <dbl_p>PyArray_DATA(sigs); pVecX = <dbl_p>PyArray_DATA(vecx)             # <<<<<<<<<<<<<<
 *         pVecY = <dbl_p>PyArray_DATA(vecy); pVecZ = <dbl_p>PyArray_DATA(vecz)
 *         vx = pDyy; vy = pDyz; vz = pDzz
 */
    __pyx_v_pSigs = ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p)PyArray_DATA(__pyx_v_sigs));
    __pyx_v_pVecX = ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p)PyArray_DATA(__pyx_v_vecx));

    /* "pysegtools/images/filters/_frangi.pyx":247
 *         vecz = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         pSigs = <dbl_p>PyArray_DATA(sigs); pVecX = <dbl_p>PyArray_DATA(vecx)
 *         pVecY = <dbl_p>PyArray_DATA(vecy); pVecZ = <dbl_p>PyArray_DATA(vecz)             # <<<<<<<<<<<<<<
 *         vx = pDyy; vy = pDyz; vz = pDzz
 * 
 */
    __pyx_v_pVecY = ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p)PyArray_DATA(__pyx_v_vecy));
    __pyx_v_pVecZ = ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p)PyArray_DATA(__pyx_v_vecz));

    /* "pysegtools/images/filters/_frangi.pyx":248
 *         pSigs = <dbl_p>PyArray_DATA(sigs); pVecX = <dbl_p>PyArray_DATA(vecx)
 *         pVecY = <dbl_p>PyArray_DATA(vecy); pVecZ = <dbl_p>PyArray_DATA(vecz)
 *         vx = pDyy; vy = pDyz; vz = pDzz             # <<<<<<<<<<<<<<
 * 
 *     # Frangi filter for all sigmas
 */
    __pyx_v_vx = __pyx_v_pDyy;
    __pyx_v_vy = __pyx_v_pDyz;
    __pyx_v_vz = __pyx_v_pDzz;

    /* "pysegtools/images/filters/_frangi.pyx":241
 *     cdef dbl_p lambda1 = pDxx, lambda2 = pDxy, lambda3 = pDxz, vx, vy, vz
 *     cdef dbl_p pOut = <dbl_p>PyArray_DATA(out), pSigs, pVecX, pVecY, pVecZ
 *     if return_full:             # <<<<<<<<<<<<<<
 *         sigs = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 *         vecx = PyArray_ZEROS(3, PyArray_SHAPE(im), NPY_DOUBLE, False)
 */
  }

  /* "pysegtools/images/filters/_frangi.pyx":251
 * 
 *     # Frangi filter for all sigmas
 *     cdef dbl sigma, lam1, lam2, lam3, lam23, Ra2, Rb2, S2, V, b = 1 if black else -1             # <<<<<<<<<<<<<<
 *     alpha = -1.0/(2.0*alpha*alpha)
 *     beta = -1.0/(2.0*beta*beta)
 */
  if ((__pyx_v_black != 0)) {
    __pyx_t_3 = 1.0;
  } else {
    __pyx_t_3 = -1.0;
  }
  __pyx_v_b = __pyx_t_3;

  /* "pysegtools/images/filters/_frangi.pyx":252
 *     # Frangi filter for all sigmas
 *     cdef dbl sigma, lam1, lam2, lam3, lam23, Ra2, Rb2, S2, V, b = 1 if black else -1
 *     alpha = -1.0/(2.0*alpha*alpha)             # <<<<<<<<<<<<<<
 *     beta = -1.0/(2.0*beta*beta)
 *     cdef bint c_dyn = c == 0.0
 */
  __pyx_v_alpha = (((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl)-1.0) / ((2.0 * __pyx_v_alpha) * __pyx_v_alpha));

  /* "pysegtools/images/filters/_frangi.pyx":253
 *     cdef dbl sigma, lam1, lam2, lam3, lam23, Ra2, Rb2, S2, V, b = 1 if black else -1
 *     alpha = -1.0/(2.0*alpha*alpha)
 *     beta = -1.0/(2.0*beta*beta)             # <<<<<<<<<<<<<<
 *     cdef bint c_dyn = c == 0.0
 *     if not c_dyn: c = -1.0/(2.0*c*c)
 */
  __pyx_v_beta = (((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl)-1.0) / ((2.0 * __pyx_v_beta) * __pyx_v_beta));

  /* "pysegtools/images/filters/_frangi.pyx":254
 *     alpha = -1.0/(2.0*alpha*alpha)
 *     beta = -1.0/(2.0*beta*beta)
 *     cdef bint c_dyn = c == 0.0             # <<<<<<<<<<<<<<
 *     if not c_dyn: c = -1.0/(2.0*c*c)
 *     cdef intp i, N = PyArray_SIZE(im)
 */
  __pyx_v_c_dyn = (__pyx_v_c == 0.0);

  /* "pysegtools/images/filters/_frangi.pyx":255
 *     beta = -1.0/(2.0*beta*beta)
 *     cdef bint c_dyn = c == 0.0
 *     if not c_dyn: c = -1.0/(2.0*c*c)             # <<<<<<<<<<<<<<
 *     cdef intp i, N = PyArray_SIZE(im)
 *     cdef bint first = True
 */
  __pyx_t_2 = ((!(__pyx_v_c_dyn != 0)) != 0);
  if (__pyx_t_2) {
    __pyx_v_c = (((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl)-1.0) / ((2.0 * __pyx_v_c) * __pyx_v_c));
  }

  /* "pysegtools/images/filters/_frangi.pyx":256
 *     cdef bint c_dyn = c == 0.0
 *     if not c_dyn: c = -1.0/(2.0*c*c)
 *     cdef intp i, N = PyArray_SIZE(im)             # <<<<<<<<<<<<<<
 *     cdef bint first = True
 *     for sigma in sigmas:
 */
  __pyx_v_N = PyArray_SIZE(__pyx_v_im);

  /* "pysegtools/images/filters/_frangi.pyx":257
 *     if not c_dyn: c = -1.0/(2.0*c*c)
 *     cdef intp i, N = PyArray_SIZE(im)
 *     cdef bint first = True             # <<<<<<<<<<<<<<
 *     for sigma in sigmas:
 *         # Calculate scaled 3D Hessian
 */
  __pyx_v_first = 1;

  /* "pysegtools/images/filters/_frangi.pyx":258
 *     cdef intp i, N = PyArray_SIZE(im)
 *     cdef bint first = True
 *     for sigma in sigmas:             # <<<<<<<<<<<<<<
 *         # Calculate scaled 3D Hessian
 *         hessian3(im, sigma, Dxx, Dxy, Dxz, Dyy, Dyz, Dzz, tmp)
 */
  if (unlikely(__pyx_v_sigmas == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 258, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_sigmas; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 258, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_3 == ((npy_double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_sigma = __pyx_t_3;

    /* "pysegtools/images/filters/_frangi.pyx":260
 *     for sigma in sigmas:
 *         # Calculate scaled 3D Hessian
 *         hessian3(im, sigma, Dxx, Dxy, Dxz, Dyy, Dyz, Dzz, tmp)             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
    __pyx_f_10pysegtools_6images_7filters_7_frangi_hessian3(__pyx_v_im, __pyx_v_sigma, __pyx_v_Dxx, __pyx_v_Dxy, __pyx_v_Dxz, __pyx_v_Dyy, __pyx_v_Dyz, __pyx_v_Dzz, __pyx_v_tmp);

    /* "pysegtools/images/filters/_frangi.pyx":262
 *         hessian3(im, sigma, Dxx, Dxy, Dxz, Dyy, Dyz, Dzz, tmp)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             # Calculate (abs sorted) eigenvalues and eigenvectors
 *             eig3volume(N, pDxx, pDxy, pDxz, pDyy, pDyz, pDzz, return_full)
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "pysegtools/images/filters/_frangi.pyx":264
 *         with nogil:
 *             # Calculate (abs sorted) eigenvalues and eigenvectors
 *             eig3volume(N, pDxx, pDxy, pDxz, pDyy, pDyz, pDzz, return_full)             # <<<<<<<<<<<<<<
 * 
 *             # Calculate the dynamic c value if necessary
 */
          __pyx_t_6.__pyx_n = 1;
          __pyx_t_6.return_vec = __pyx_v_return_full;
          __pyx_f_10pysegtools_6images_7filters_7_frangi_eig3volume(__pyx_v_N, __pyx_v_pDxx, __pyx_v_pDxy, __pyx_v_pDxz, __pyx_v_pDyy, __pyx_v_pDyz, __pyx_v_pDzz, &__pyx_t_6); 

          /* "pysegtools/images/filters/_frangi.pyx":267
 * 
 *             # Calculate the dynamic c value if necessary
 *             if c_dyn:             # <<<<<<<<<<<<<<
 *                 c = 0.0
 *                 for i in xrange(N):
 */
          __pyx_t_2 = (__pyx_v_c_dyn != 0);
          if (__pyx_t_2) {

            /* "pysegtools/images/filters/_frangi.pyx":268
 *             # Calculate the dynamic c value if necessary
 *             if c_dyn:
 *                 c = 0.0             # <<<<<<<<<<<<<<
 *                 for i in xrange(N):
 *                     lam2 = lambda2[i]; lam3 = lambda3[i]
 */
            __pyx_v_c = 0.0;

            /* "pysegtools/images/filters/_frangi.pyx":269
 *             if c_dyn:
 *                 c = 0.0
 *                 for i in xrange(N):             # <<<<<<<<<<<<<<
 *                     lam2 = lambda2[i]; lam3 = lambda3[i]
 *                     if lam2 != 0.0 and lam3 != 0.0 and (b*lam2 > 0.0 or b*lam3 > 0.0):
 */
            __pyx_t_7 = __pyx_v_N;
            for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
              __pyx_v_i = __pyx_t_8;

              /* "pysegtools/images/filters/_frangi.pyx":270
 *                 c = 0.0
 *                 for i in xrange(N):
 *                     lam2 = lambda2[i]; lam3 = lambda3[i]             # <<<<<<<<<<<<<<
 *                     if lam2 != 0.0 and lam3 != 0.0 and (b*lam2 > 0.0 or b*lam3 > 0.0):
 *                         lam1 = lambda1[i]
 */
              __pyx_v_lam2 = (__pyx_v_lambda2[__pyx_v_i]);
              __pyx_v_lam3 = (__pyx_v_lambda3[__pyx_v_i]);

              /* "pysegtools/images/filters/_frangi.pyx":271
 *                 for i in xrange(N):
 *                     lam2 = lambda2[i]; lam3 = lambda3[i]
 *                     if lam2 != 0.0 and lam3 != 0.0 and (b*lam2 > 0.0 or b*lam3 > 0.0):             # <<<<<<<<<<<<<<
 *                         lam1 = lambda1[i]
 *                         S2 = lam1*lam1 + lam2*lam2 + lam3*lam3
 */
              __pyx_t_9 = ((__pyx_v_lam2 != 0.0) != 0);
              if (__pyx_t_9) {
              } else {
                __pyx_t_2 = __pyx_t_9;
                goto __pyx_L16_bool_binop_done;
              }
              __pyx_t_9 = ((__pyx_v_lam3 != 0.0) != 0);
              if (__pyx_t_9) {
              } else {
                __pyx_t_2 = __pyx_t_9;
                goto __pyx_L16_bool_binop_done;
              }
              __pyx_t_9 = (((__pyx_v_b * __pyx_v_lam2) > 0.0) != 0);
              if (!__pyx_t_9) {
              } else {
                __pyx_t_2 = __pyx_t_9;
                goto __pyx_L16_bool_binop_done;
              }
              __pyx_t_9 = (((__pyx_v_b * __pyx_v_lam3) > 0.0) != 0);
              __pyx_t_2 = __pyx_t_9;
              __pyx_L16_bool_binop_done:;
              if (__pyx_t_2) {

                /* "pysegtools/images/filters/_frangi.pyx":272
 *                     lam2 = lambda2[i]; lam3 = lambda3[i]
 *                     if lam2 != 0.0 and lam3 != 0.0 and (b*lam2 > 0.0 or b*lam3 > 0.0):
 *                         lam1 = lambda1[i]             # <<<<<<<<<<<<<<
 *                         S2 = lam1*lam1 + lam2*lam2 + lam3*lam3
 *                         if S2 > c: c = S2
 */
                __pyx_v_lam1 = (__pyx_v_lambda1[__pyx_v_i]);

                /* "pysegtools/images/filters/_frangi.pyx":273
 *                     if lam2 != 0.0 and lam3 != 0.0 and (b*lam2 > 0.0 or b*lam3 > 0.0):
 *                         lam1 = lambda1[i]
 *                         S2 = lam1*lam1 + lam2*lam2 + lam3*lam3             # <<<<<<<<<<<<<<
 *                         if S2 > c: c = S2
 *                 c = -2.0/c
 */
                __pyx_v_S2 = (((__pyx_v_lam1 * __pyx_v_lam1) + (__pyx_v_lam2 * __pyx_v_lam2)) + (__pyx_v_lam3 * __pyx_v_lam3));

                /* "pysegtools/images/filters/_frangi.pyx":274
 *                         lam1 = lambda1[i]
 *                         S2 = lam1*lam1 + lam2*lam2 + lam3*lam3
 *                         if S2 > c: c = S2             # <<<<<<<<<<<<<<
 *                 c = -2.0/c
 * 
 */
                __pyx_t_2 = ((__pyx_v_S2 > __pyx_v_c) != 0);
                if (__pyx_t_2) {
                  __pyx_v_c = __pyx_v_S2;
                }

                /* "pysegtools/images/filters/_frangi.pyx":271
 *                 for i in xrange(N):
 *                     lam2 = lambda2[i]; lam3 = lambda3[i]
 *                     if lam2 != 0.0 and lam3 != 0.0 and (b*lam2 > 0.0 or b*lam3 > 0.0):             # <<<<<<<<<<<<<<
 *                         lam1 = lambda1[i]
 *                         S2 = lam1*lam1 + lam2*lam2 + lam3*lam3
 */
              }
            }

            /* "pysegtools/images/filters/_frangi.pyx":275
 *                         S2 = lam1*lam1 + lam2*lam2 + lam3*lam3
 *                         if S2 > c: c = S2
 *                 c = -2.0/c             # <<<<<<<<<<<<<<
 * 
 *             # Calculate the vesselness
 */
            __pyx_v_c = (((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl)-2.0) / __pyx_v_c);

            /* "pysegtools/images/filters/_frangi.pyx":267
 * 
 *             # Calculate the dynamic c value if necessary
 *             if c_dyn:             # <<<<<<<<<<<<<<
 *                 c = 0.0
 *                 for i in xrange(N):
 */
          }

          /* "pysegtools/images/filters/_frangi.pyx":278
 * 
 *             # Calculate the vesselness
 *             for i in xrange(N):             # <<<<<<<<<<<<<<
 *                 lam2 = lambda2[i]; lam3 = lambda3[i]
 *                 if lam2 != 0.0 and lam3 != 0.0 and (b*lam2 > 0.0 or b*lam3 > 0.0):
 */
          __pyx_t_7 = __pyx_v_N;
          for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
            __pyx_v_i = __pyx_t_8;

            /* "pysegtools/images/filters/_frangi.pyx":279
 *             # Calculate the vesselness
 *             for i in xrange(N):
 *                 lam2 = lambda2[i]; lam3 = lambda3[i]             # <<<<<<<<<<<<<<
 *                 if lam2 != 0.0 and lam3 != 0.0 and (b*lam2 > 0.0 or b*lam3 > 0.0):
 *                     lam1 = lambda1[i]
 */
            __pyx_v_lam2 = (__pyx_v_lambda2[__pyx_v_i]);
            __pyx_v_lam3 = (__pyx_v_lambda3[__pyx_v_i]);

            /* "pysegtools/images/filters/_frangi.pyx":280
 *             for i in xrange(N):
 *                 lam2 = lambda2[i]; lam3 = lambda3[i]
 *                 if lam2 != 0.0 and lam3 != 0.0 and (b*lam2 > 0.0 or b*lam3 > 0.0):             # <<<<<<<<<<<<<<
 *                     lam1 = lambda1[i]
 * 
 */
            __pyx_t_9 = ((__pyx_v_lam2 != 0.0) != 0);
            if (__pyx_t_9) {
            } else {
              __pyx_t_2 = __pyx_t_9;
              goto __pyx_L24_bool_binop_done;
            }
            __pyx_t_9 = ((__pyx_v_lam3 != 0.0) != 0);
            if (__pyx_t_9) {
            } else {
              __pyx_t_2 = __pyx_t_9;
              goto __pyx_L24_bool_binop_done;
            }
            __pyx_t_9 = (((__pyx_v_b * __pyx_v_lam2) > 0.0) != 0);
            if (!__pyx_t_9) {
            } else {
              __pyx_t_2 = __pyx_t_9;
              goto __pyx_L24_bool_binop_done;
            }
            __pyx_t_9 = (((__pyx_v_b * __pyx_v_lam3) > 0.0) != 0);
            __pyx_t_2 = __pyx_t_9;
            __pyx_L24_bool_binop_done:;
            if (__pyx_t_2) {

              /* "pysegtools/images/filters/_frangi.pyx":281
 *                 lam2 = lambda2[i]; lam3 = lambda3[i]
 *                 if lam2 != 0.0 and lam3 != 0.0 and (b*lam2 > 0.0 or b*lam3 > 0.0):
 *                     lam1 = lambda1[i]             # <<<<<<<<<<<<<<
 * 
 *                     # Ra2/Rb2 -> vesselness features
 */
              __pyx_v_lam1 = (__pyx_v_lambda1[__pyx_v_i]);

              /* "pysegtools/images/filters/_frangi.pyx":285
 *                     # Ra2/Rb2 -> vesselness features
 *                     # S -> second order structureness
 *                     lam23 = fabs(lam2*lam3); lam1 *= lam1; lam2 *= lam2; lam3 *= lam3             # <<<<<<<<<<<<<<
 *                     Ra2 = 1.0-exp(lam2/lam3*alpha)    # 1-exp(-Ra^2/(2*alpha^2)); Ra = |lambda2|/|lambda3|
 *                     Rb2 =     exp(lam1/lam23*beta)    #   exp(-Rb^2/(2*beta^2));  Rb = |lambda1|/sqrt(|lambda2||lambda3|)
 */
              __pyx_v_lam23 = fabs((__pyx_v_lam2 * __pyx_v_lam3));
              __pyx_v_lam1 = (__pyx_v_lam1 * __pyx_v_lam1);
              __pyx_v_lam2 = (__pyx_v_lam2 * __pyx_v_lam2);
              __pyx_v_lam3 = (__pyx_v_lam3 * __pyx_v_lam3);

              /* "pysegtools/images/filters/_frangi.pyx":286
 *                     # S -> second order structureness
 *                     lam23 = fabs(lam2*lam3); lam1 *= lam1; lam2 *= lam2; lam3 *= lam3
 *                     Ra2 = 1.0-exp(lam2/lam3*alpha)    # 1-exp(-Ra^2/(2*alpha^2)); Ra = |lambda2|/|lambda3|             # <<<<<<<<<<<<<<
 *                     Rb2 =     exp(lam1/lam23*beta)    #   exp(-Rb^2/(2*beta^2));  Rb = |lambda1|/sqrt(|lambda2||lambda3|)
 *                     S2  = 1.0-exp((lam1+lam2+lam3)*c) # 1-exp(-S^2/(2*c^2));      S = sqrt(sum(lambda_i^2))
 */
              __pyx_v_Ra2 = (1.0 - exp(((__pyx_v_lam2 / __pyx_v_lam3) * __pyx_v_alpha)));

              /* "pysegtools/images/filters/_frangi.pyx":287
 *                     lam23 = fabs(lam2*lam3); lam1 *= lam1; lam2 *= lam2; lam3 *= lam3
 *                     Ra2 = 1.0-exp(lam2/lam3*alpha)    # 1-exp(-Ra^2/(2*alpha^2)); Ra = |lambda2|/|lambda3|
 *                     Rb2 =     exp(lam1/lam23*beta)    #   exp(-Rb^2/(2*beta^2));  Rb = |lambda1|/sqrt(|lambda2||lambda3|)             # <<<<<<<<<<<<<<
 *                     S2  = 1.0-exp((lam1+lam2+lam3)*c) # 1-exp(-S^2/(2*c^2));      S = sqrt(sum(lambda_i^2))
 *                     V = Ra2*Rb2*S2
 */
              __pyx_v_Rb2 = exp(((__pyx_v_lam1 / __pyx_v_lam23) * __pyx_v_beta));

              /* "pysegtools/images/filters/_frangi.pyx":288
 *                     Ra2 = 1.0-exp(lam2/lam3*alpha)    # 1-exp(-Ra^2/(2*alpha^2)); Ra = |lambda2|/|lambda3|
 *                     Rb2 =     exp(lam1/lam23*beta)    #   exp(-Rb^2/(2*beta^2));  Rb = |lambda1|/sqrt(|lambda2||lambda3|)
 *                     S2  = 1.0-exp((lam1+lam2+lam3)*c) # 1-exp(-S^2/(2*c^2));      S = sqrt(sum(lambda_i^2))             # <<<<<<<<<<<<<<
 *                     V = Ra2*Rb2*S2
 * 
 */
              __pyx_v_S2 = (1.0 - exp((((__pyx_v_lam1 + __pyx_v_lam2) + __pyx_v_lam3) * __pyx_v_c)));

              /* "pysegtools/images/filters/_frangi.pyx":289
 *                     Rb2 =     exp(lam1/lam23*beta)    #   exp(-Rb^2/(2*beta^2));  Rb = |lambda1|/sqrt(|lambda2||lambda3|)
 *                     S2  = 1.0-exp((lam1+lam2+lam3)*c) # 1-exp(-S^2/(2*c^2));      S = sqrt(sum(lambda_i^2))
 *                     V = Ra2*Rb2*S2             # <<<<<<<<<<<<<<
 * 
 *                     # If maximal, store values
 */
              __pyx_v_V = ((__pyx_v_Ra2 * __pyx_v_Rb2) * __pyx_v_S2);

              /* "pysegtools/images/filters/_frangi.pyx":292
 * 
 *                     # If maximal, store values
 *                     if V > pOut[i]:             # <<<<<<<<<<<<<<
 *                         pOut[i] = V
 *                         if return_full:
 */
              __pyx_t_2 = ((__pyx_v_V > (__pyx_v_pOut[__pyx_v_i])) != 0);
              if (__pyx_t_2) {

                /* "pysegtools/images/filters/_frangi.pyx":293
 *                     # If maximal, store values
 *                     if V > pOut[i]:
 *                         pOut[i] = V             # <<<<<<<<<<<<<<
 *                         if return_full:
 *                             pSigs[i] = sigma
 */
                (__pyx_v_pOut[__pyx_v_i]) = __pyx_v_V;

                /* "pysegtools/images/filters/_frangi.pyx":294
 *                     if V > pOut[i]:
 *                         pOut[i] = V
 *                         if return_full:             # <<<<<<<<<<<<<<
 *                             pSigs[i] = sigma
 *                             pVecX[i] = vx[i]; pVecY[i] = vy[i]; pVecZ[i] = vz[i]
 */
                __pyx_t_2 = (__pyx_v_return_full != 0);
                if (__pyx_t_2) {

                  /* "pysegtools/images/filters/_frangi.pyx":295
 *                         pOut[i] = V
 *                         if return_full:
 *                             pSigs[i] = sigma             # <<<<<<<<<<<<<<
 *                             pVecX[i] = vx[i]; pVecY[i] = vy[i]; pVecZ[i] = vz[i]
 *                 elif first: pOut[i] = 0
 */
                  (__pyx_v_pSigs[__pyx_v_i]) = __pyx_v_sigma;

                  /* "pysegtools/images/filters/_frangi.pyx":296
 *                         if return_full:
 *                             pSigs[i] = sigma
 *                             pVecX[i] = vx[i]; pVecY[i] = vy[i]; pVecZ[i] = vz[i]             # <<<<<<<<<<<<<<
 *                 elif first: pOut[i] = 0
 * 
 */
                  (__pyx_v_pVecX[__pyx_v_i]) = (__pyx_v_vx[__pyx_v_i]);
                  (__pyx_v_pVecY[__pyx_v_i]) = (__pyx_v_vy[__pyx_v_i]);
                  (__pyx_v_pVecZ[__pyx_v_i]) = (__pyx_v_vz[__pyx_v_i]);

                  /* "pysegtools/images/filters/_frangi.pyx":294
 *                     if V > pOut[i]:
 *                         pOut[i] = V
 *                         if return_full:             # <<<<<<<<<<<<<<
 *                             pSigs[i] = sigma
 *                             pVecX[i] = vx[i]; pVecY[i] = vy[i]; pVecZ[i] = vz[i]
 */
                }

                /* "pysegtools/images/filters/_frangi.pyx":292
 * 
 *                     # If maximal, store values
 *                     if V > pOut[i]:             # <<<<<<<<<<<<<<
 *                         pOut[i] = V
 *                         if return_full:
 */
              }

              /* "pysegtools/images/filters/_frangi.pyx":280
 *             for i in xrange(N):
 *                 lam2 = lambda2[i]; lam3 = lambda3[i]
 *                 if lam2 != 0.0 and lam3 != 0.0 and (b*lam2 > 0.0 or b*lam3 > 0.0):             # <<<<<<<<<<<<<<
 *                     lam1 = lambda1[i]
 * 
 */
              goto __pyx_L23;
            }

            /* "pysegtools/images/filters/_frangi.pyx":297
 *                             pSigs[i] = sigma
 *                             pVecX[i] = vx[i]; pVecY[i] = vy[i]; pVecZ[i] = vz[i]
 *                 elif first: pOut[i] = 0             # <<<<<<<<<<<<<<
 * 
 *             first = False
 */
            __pyx_t_2 = (__pyx_v_first != 0);
            if (__pyx_t_2) {
              (__pyx_v_pOut[__pyx_v_i]) = 0.0;
            }
            __pyx_L23:;
          }

          /* "pysegtools/images/filters/_frangi.pyx":299
 *                 elif first: pOut[i] = 0
 * 
 *             first = False             # <<<<<<<<<<<<<<
 * 
 *     return (out,sigs,vecx,vecy,vecz) if return_full else out
 */
          __pyx_v_first = 0;
        }

        /* "pysegtools/images/filters/_frangi.pyx":262
 *         hessian3(im, sigma, Dxx, Dxy, Dxz, Dyy, Dyz, Dzz, tmp)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             # Calculate (abs sorted) eigenvalues and eigenvectors
 *             eig3volume(N, pDxx, pDxy, pDxz, pDyy, pDyz, pDzz, return_full)
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L11;
          }
          __pyx_L11:;
        }
    }

    /* "pysegtools/images/filters/_frangi.pyx":258
 *     cdef intp i, N = PyArray_SIZE(im)
 *     cdef bint first = True
 *     for sigma in sigmas:             # <<<<<<<<<<<<<<
 *         # Calculate scaled 3D Hessian
 *         hessian3(im, sigma, Dxx, Dxy, Dxz, Dyy, Dyz, Dzz, tmp)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":301
 *             first = False
 * 
 *     return (out,sigs,vecx,vecy,vecz) if return_full else out             # <<<<<<<<<<<<<<
 * 
 * cdef void hessian3(ndarray im, dbl sigma, ndarray Dxx, ndarray Dxy, ndarray Dxz, ndarray Dyy, ndarray Dyz, ndarray Dzz, ndarray tmp):
 */
  __Pyx_XDECREF(__pyx_r);
  if ((__pyx_v_return_full != 0)) {
    if (unlikely(!__pyx_v_sigs)) { __Pyx_RaiseUnboundLocalError("sigs"); __PYX_ERR(0, 301, __pyx_L1_error) }
    if (unlikely(!__pyx_v_vecx)) { __Pyx_RaiseUnboundLocalError("vecx"); __PYX_ERR(0, 301, __pyx_L1_error) }
    if (unlikely(!__pyx_v_vecy)) { __Pyx_RaiseUnboundLocalError("vecy"); __PYX_ERR(0, 301, __pyx_L1_error) }
    if (unlikely(!__pyx_v_vecz)) { __Pyx_RaiseUnboundLocalError("vecz"); __PYX_ERR(0, 301, __pyx_L1_error) }
    __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)__pyx_v_out));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_out));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_out));
    __Pyx_INCREF(((PyObject *)__pyx_v_sigs));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_sigs));
    PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_sigs));
    __Pyx_INCREF(((PyObject *)__pyx_v_vecx));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_vecx));
    PyTuple_SET_ITEM(__pyx_t_5, 2, ((PyObject *)__pyx_v_vecx));
    __Pyx_INCREF(((PyObject *)__pyx_v_vecy));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_vecy));
    PyTuple_SET_ITEM(__pyx_t_5, 3, ((PyObject *)__pyx_v_vecy));
    __Pyx_INCREF(((PyObject *)__pyx_v_vecz));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_vecz));
    PyTuple_SET_ITEM(__pyx_t_5, 4, ((PyObject *)__pyx_v_vecz));
    __pyx_t_1 = __pyx_t_5;
    __pyx_t_5 = 0;
  } else {
    __Pyx_INCREF(((PyObject *)__pyx_v_out));
    __pyx_t_1 = ((PyObject *)__pyx_v_out);
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pysegtools/images/filters/_frangi.pyx":218
 * 
 * ########## Frangi 3D ##########
 * def frangi3(ndarray im, ndarray out, tuple sigmas, dbl alpha, dbl beta, dbl c, bint black, bint return_full):             # <<<<<<<<<<<<<<
 *     """
 *     Internal function to compute the 3D Frangi filter according to Frangi et al (1998).
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pysegtools.images.filters._frangi.frangi3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_Dxx);
  __Pyx_XDECREF((PyObject *)__pyx_v_Dxy);
  __Pyx_XDECREF((PyObject *)__pyx_v_Dxz);
  __Pyx_XDECREF((PyObject *)__pyx_v_Dyy);
  __Pyx_XDECREF((PyObject *)__pyx_v_Dyz);
  __Pyx_XDECREF((PyObject *)__pyx_v_Dzz);
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp);
  __Pyx_XDECREF((PyObject *)__pyx_v_sigs);
  __Pyx_XDECREF((PyObject *)__pyx_v_vecx);
  __Pyx_XDECREF((PyObject *)__pyx_v_vecy);
  __Pyx_XDECREF((PyObject *)__pyx_v_vecz);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysegtools/images/filters/_frangi.pyx":303
 *     return (out,sigs,vecx,vecy,vecz) if return_full else out
 * 
 * cdef void hessian3(ndarray im, dbl sigma, ndarray Dxx, ndarray Dxy, ndarray Dxz, ndarray Dyy, ndarray Dyz, ndarray Dzz, ndarray tmp):             # <<<<<<<<<<<<<<
 *     """
 *     Filters an image with the 2nd derivatives of a Gaussian with parameter `sigma`. This
 */

static void __pyx_f_10pysegtools_6images_7filters_7_frangi_hessian3(PyArrayObject *__pyx_v_im, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_sigma, PyArrayObject *__pyx_v_Dxx, PyArrayObject *__pyx_v_Dxy, PyArrayObject *__pyx_v_Dxz, PyArrayObject *__pyx_v_Dyy, PyArrayObject *__pyx_v_Dyz, PyArrayObject *__pyx_v_Dzz, PyArrayObject *__pyx_v_tmp) {
  PyObject *__pyx_v_exp = NULL;
  PyObject *__pyx_v_correlate1d = NULL;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_sigma2;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_p;
  PyArrayObject *__pyx_v_i = 0;
  PyArrayObject *__pyx_v_i2 = 0;
  PyArrayObject *__pyx_v_Gn = 0;
  PyArrayObject *__pyx_v_G1 = 0;
  PyArrayObject *__pyx_v_G2 = 0;
  PyArrayObject *__pyx_v_tmp2 = 0;
  PyObject *__pyx_v_c = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("hessian3", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_Dxx);
  __Pyx_INCREF((PyObject *)__pyx_v_Dxy);
  __Pyx_INCREF((PyObject *)__pyx_v_Dxz);
  __Pyx_INCREF((PyObject *)__pyx_v_Dyy);
  __Pyx_INCREF((PyObject *)__pyx_v_Dyz);
  __Pyx_INCREF((PyObject *)__pyx_v_Dzz);

  /* "pysegtools/images/filters/_frangi.pyx":339
 *     #
 *     # Not any faster or memory efficent than the Python version...
 *     from numpy import exp             # <<<<<<<<<<<<<<
 *     from scipy.ndimage import correlate1d
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_exp);
  __Pyx_GIVEREF(__pyx_n_s_exp);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_exp);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_exp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_exp = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":340
 *     # Not any faster or memory efficent than the Python version...
 *     from numpy import exp
 *     from scipy.ndimage import correlate1d             # <<<<<<<<<<<<<<
 * 
 *     cdef dbl sigma2 = sigma*sigma, p = round(3.0*sigma+0.5)
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_correlate1d);
  __Pyx_GIVEREF(__pyx_n_s_correlate1d);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_correlate1d);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_scipy_ndimage, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_correlate1d); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_correlate1d = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":342
 *     from scipy.ndimage import correlate1d
 * 
 *     cdef dbl sigma2 = sigma*sigma, p = round(3.0*sigma+0.5)             # <<<<<<<<<<<<<<
 *     cdef ndarray i = PyArray_Arange(p, -p-1.0, -1.0, NPY_DOUBLE), i2 = i*i
 * 
 */
  __pyx_v_sigma2 = (__pyx_v_sigma * __pyx_v_sigma);
  __pyx_t_1 = PyFloat_FromDouble(((3.0 * __pyx_v_sigma) + 0.5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == ((npy_double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_p = __pyx_t_3;

  /* "pysegtools/images/filters/_frangi.pyx":343
 * 
 *     cdef dbl sigma2 = sigma*sigma, p = round(3.0*sigma+0.5)
 *     cdef ndarray i = PyArray_Arange(p, -p-1.0, -1.0, NPY_DOUBLE), i2 = i*i             # <<<<<<<<<<<<<<
 * 
 *     cdef ndarray Gn = exp(-i2/sigma2)           # kernel for dims that we are not differentiating
 */
  __pyx_t_1 = ((PyObject *)PyArray_Arange(__pyx_v_p, ((-__pyx_v_p) - 1.0), -1.0, NPY_DOUBLE)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_i = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(((PyObject *)__pyx_v_i), ((PyObject *)__pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10npy_helper_ndarray))))) __PYX_ERR(0, 343, __pyx_L1_error)
  __pyx_v_i2 = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":345
 *     cdef ndarray i = PyArray_Arange(p, -p-1.0, -1.0, NPY_DOUBLE), i2 = i*i
 * 
 *     cdef ndarray Gn = exp(-i2/sigma2)           # kernel for dims that we are not differentiating             # <<<<<<<<<<<<<<
 *     cdef ndarray G1=i*Gn, G2=(i2-sigma2/2.0)*Gn # kernel for dims that we are taking 1st and 2nd derivatives of
 *     cdef ndarray tmp2 = Dxy # use this one as a second temporary since we don't need it till the end
 */
  __pyx_t_2 = PyNumber_Negative(((PyObject *)__pyx_v_i2)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_sigma2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_v_exp);
  __pyx_t_4 = __pyx_v_exp; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 345, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10npy_helper_ndarray))))) __PYX_ERR(0, 345, __pyx_L1_error)
  __pyx_v_Gn = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":346
 * 
 *     cdef ndarray Gn = exp(-i2/sigma2)           # kernel for dims that we are not differentiating
 *     cdef ndarray G1=i*Gn, G2=(i2-sigma2/2.0)*Gn # kernel for dims that we are taking 1st and 2nd derivatives of             # <<<<<<<<<<<<<<
 *     cdef ndarray tmp2 = Dxy # use this one as a second temporary since we don't need it till the end
 * 
 */
  __pyx_t_1 = PyNumber_Multiply(((PyObject *)__pyx_v_i), ((PyObject *)__pyx_v_Gn)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10npy_helper_ndarray))))) __PYX_ERR(0, 346, __pyx_L1_error)
  __pyx_v_G1 = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_sigma2 / ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl)2.0))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Subtract(((PyObject *)__pyx_v_i2), __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_4, ((PyObject *)__pyx_v_Gn)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10npy_helper_ndarray))))) __PYX_ERR(0, 346, __pyx_L1_error)
  __pyx_v_G2 = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":347
 *     cdef ndarray Gn = exp(-i2/sigma2)           # kernel for dims that we are not differentiating
 *     cdef ndarray G1=i*Gn, G2=(i2-sigma2/2.0)*Gn # kernel for dims that we are taking 1st and 2nd derivatives of
 *     cdef ndarray tmp2 = Dxy # use this one as a second temporary since we don't need it till the end             # <<<<<<<<<<<<<<
 * 
 *     # Outputs never differentiated along the x-axis
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_Dxy));
  __pyx_v_tmp2 = __pyx_v_Dxy;

  /* "pysegtools/images/filters/_frangi.pyx":350
 * 
 *     # Outputs never differentiated along the x-axis
 *     correlate1d(im, Gn, 0, tmp2)             # <<<<<<<<<<<<<<
 *     correlate1d(tmp2, G1, 1, tmp); correlate1d(tmp, G1, 2, Dyz)
 *     correlate1d(tmp2, G2, 1, tmp); correlate1d(tmp, Gn, 2, Dyy)
 */
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_4 = __pyx_v_correlate1d; __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, ((PyObject *)__pyx_v_im), ((PyObject *)__pyx_v_Gn), __pyx_int_0, ((PyObject *)__pyx_v_tmp2)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, ((PyObject *)__pyx_v_im), ((PyObject *)__pyx_v_Gn), __pyx_int_0, ((PyObject *)__pyx_v_tmp2)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_im));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_im));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, ((PyObject *)__pyx_v_im));
    __Pyx_INCREF(((PyObject *)__pyx_v_Gn));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_Gn));
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, ((PyObject *)__pyx_v_Gn));
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_7, __pyx_int_0);
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp2));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp2));
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_7, ((PyObject *)__pyx_v_tmp2));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":351
 *     # Outputs never differentiated along the x-axis
 *     correlate1d(im, Gn, 0, tmp2)
 *     correlate1d(tmp2, G1, 1, tmp); correlate1d(tmp, G1, 2, Dyz)             # <<<<<<<<<<<<<<
 *     correlate1d(tmp2, G2, 1, tmp); correlate1d(tmp, Gn, 2, Dyy)
 *     correlate1d(tmp2, Gn, 1, tmp); correlate1d(tmp, G2, 2, Dzz)
 */
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_4 = __pyx_v_correlate1d; __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, ((PyObject *)__pyx_v_tmp2), ((PyObject *)__pyx_v_G1), __pyx_int_1, ((PyObject *)__pyx_v_tmp)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, ((PyObject *)__pyx_v_tmp2), ((PyObject *)__pyx_v_G1), __pyx_int_1, ((PyObject *)__pyx_v_tmp)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp2));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp2));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, ((PyObject *)__pyx_v_tmp2));
    __Pyx_INCREF(((PyObject *)__pyx_v_G1));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_G1));
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, ((PyObject *)__pyx_v_G1));
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_7, __pyx_int_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_7, ((PyObject *)__pyx_v_tmp));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_4 = __pyx_v_correlate1d; __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, ((PyObject *)__pyx_v_tmp), ((PyObject *)__pyx_v_G1), __pyx_int_2, ((PyObject *)__pyx_v_Dyz)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, ((PyObject *)__pyx_v_tmp), ((PyObject *)__pyx_v_G1), __pyx_int_2, ((PyObject *)__pyx_v_Dyz)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, ((PyObject *)__pyx_v_tmp));
    __Pyx_INCREF(((PyObject *)__pyx_v_G1));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_G1));
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, ((PyObject *)__pyx_v_G1));
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_7, __pyx_int_2);
    __Pyx_INCREF(((PyObject *)__pyx_v_Dyz));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_Dyz));
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_7, ((PyObject *)__pyx_v_Dyz));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":352
 *     correlate1d(im, Gn, 0, tmp2)
 *     correlate1d(tmp2, G1, 1, tmp); correlate1d(tmp, G1, 2, Dyz)
 *     correlate1d(tmp2, G2, 1, tmp); correlate1d(tmp, Gn, 2, Dyy)             # <<<<<<<<<<<<<<
 *     correlate1d(tmp2, Gn, 1, tmp); correlate1d(tmp, G2, 2, Dzz)
 * 
 */
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_4 = __pyx_v_correlate1d; __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, ((PyObject *)__pyx_v_tmp2), ((PyObject *)__pyx_v_G2), __pyx_int_1, ((PyObject *)__pyx_v_tmp)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, ((PyObject *)__pyx_v_tmp2), ((PyObject *)__pyx_v_G2), __pyx_int_1, ((PyObject *)__pyx_v_tmp)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp2));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp2));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, ((PyObject *)__pyx_v_tmp2));
    __Pyx_INCREF(((PyObject *)__pyx_v_G2));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_G2));
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, ((PyObject *)__pyx_v_G2));
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_7, __pyx_int_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_7, ((PyObject *)__pyx_v_tmp));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_4 = __pyx_v_correlate1d; __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, ((PyObject *)__pyx_v_tmp), ((PyObject *)__pyx_v_Gn), __pyx_int_2, ((PyObject *)__pyx_v_Dyy)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, ((PyObject *)__pyx_v_tmp), ((PyObject *)__pyx_v_Gn), __pyx_int_2, ((PyObject *)__pyx_v_Dyy)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, ((PyObject *)__pyx_v_tmp));
    __Pyx_INCREF(((PyObject *)__pyx_v_Gn));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_Gn));
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, ((PyObject *)__pyx_v_Gn));
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_7, __pyx_int_2);
    __Pyx_INCREF(((PyObject *)__pyx_v_Dyy));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_Dyy));
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_7, ((PyObject *)__pyx_v_Dyy));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":353
 *     correlate1d(tmp2, G1, 1, tmp); correlate1d(tmp, G1, 2, Dyz)
 *     correlate1d(tmp2, G2, 1, tmp); correlate1d(tmp, Gn, 2, Dyy)
 *     correlate1d(tmp2, Gn, 1, tmp); correlate1d(tmp, G2, 2, Dzz)             # <<<<<<<<<<<<<<
 * 
 *     # Outputs never differentiated along the y-axis
 */
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_4 = __pyx_v_correlate1d; __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, ((PyObject *)__pyx_v_tmp2), ((PyObject *)__pyx_v_Gn), __pyx_int_1, ((PyObject *)__pyx_v_tmp)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, ((PyObject *)__pyx_v_tmp2), ((PyObject *)__pyx_v_Gn), __pyx_int_1, ((PyObject *)__pyx_v_tmp)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp2));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp2));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, ((PyObject *)__pyx_v_tmp2));
    __Pyx_INCREF(((PyObject *)__pyx_v_Gn));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_Gn));
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, ((PyObject *)__pyx_v_Gn));
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_7, __pyx_int_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_7, ((PyObject *)__pyx_v_tmp));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_4 = __pyx_v_correlate1d; __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, ((PyObject *)__pyx_v_tmp), ((PyObject *)__pyx_v_G2), __pyx_int_2, ((PyObject *)__pyx_v_Dzz)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, ((PyObject *)__pyx_v_tmp), ((PyObject *)__pyx_v_G2), __pyx_int_2, ((PyObject *)__pyx_v_Dzz)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, ((PyObject *)__pyx_v_tmp));
    __Pyx_INCREF(((PyObject *)__pyx_v_G2));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_G2));
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, ((PyObject *)__pyx_v_G2));
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_7, __pyx_int_2);
    __Pyx_INCREF(((PyObject *)__pyx_v_Dzz));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_Dzz));
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_7, ((PyObject *)__pyx_v_Dzz));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":356
 * 
 *     # Outputs never differentiated along the y-axis
 *     correlate1d(im, Gn, 1, tmp2)             # <<<<<<<<<<<<<<
 *     correlate1d(tmp2, G1, 0, tmp); correlate1d(tmp, G1, 2, Dxz)
 *     correlate1d(tmp2, G2, 0, tmp); correlate1d(tmp, Gn, 2, Dxx)
 */
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_4 = __pyx_v_correlate1d; __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, ((PyObject *)__pyx_v_im), ((PyObject *)__pyx_v_Gn), __pyx_int_1, ((PyObject *)__pyx_v_tmp2)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, ((PyObject *)__pyx_v_im), ((PyObject *)__pyx_v_Gn), __pyx_int_1, ((PyObject *)__pyx_v_tmp2)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_im));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_im));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, ((PyObject *)__pyx_v_im));
    __Pyx_INCREF(((PyObject *)__pyx_v_Gn));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_Gn));
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, ((PyObject *)__pyx_v_Gn));
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_7, __pyx_int_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp2));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp2));
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_7, ((PyObject *)__pyx_v_tmp2));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":357
 *     # Outputs never differentiated along the y-axis
 *     correlate1d(im, Gn, 1, tmp2)
 *     correlate1d(tmp2, G1, 0, tmp); correlate1d(tmp, G1, 2, Dxz)             # <<<<<<<<<<<<<<
 *     correlate1d(tmp2, G2, 0, tmp); correlate1d(tmp, Gn, 2, Dxx)
 * 
 */
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_4 = __pyx_v_correlate1d; __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, ((PyObject *)__pyx_v_tmp2), ((PyObject *)__pyx_v_G1), __pyx_int_0, ((PyObject *)__pyx_v_tmp)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, ((PyObject *)__pyx_v_tmp2), ((PyObject *)__pyx_v_G1), __pyx_int_0, ((PyObject *)__pyx_v_tmp)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp2));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp2));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, ((PyObject *)__pyx_v_tmp2));
    __Pyx_INCREF(((PyObject *)__pyx_v_G1));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_G1));
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, ((PyObject *)__pyx_v_G1));
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_7, __pyx_int_0);
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_7, ((PyObject *)__pyx_v_tmp));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_4 = __pyx_v_correlate1d; __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, ((PyObject *)__pyx_v_tmp), ((PyObject *)__pyx_v_G1), __pyx_int_2, ((PyObject *)__pyx_v_Dxz)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, ((PyObject *)__pyx_v_tmp), ((PyObject *)__pyx_v_G1), __pyx_int_2, ((PyObject *)__pyx_v_Dxz)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, ((PyObject *)__pyx_v_tmp));
    __Pyx_INCREF(((PyObject *)__pyx_v_G1));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_G1));
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, ((PyObject *)__pyx_v_G1));
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_7, __pyx_int_2);
    __Pyx_INCREF(((PyObject *)__pyx_v_Dxz));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_Dxz));
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_7, ((PyObject *)__pyx_v_Dxz));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":358
 *     correlate1d(im, Gn, 1, tmp2)
 *     correlate1d(tmp2, G1, 0, tmp); correlate1d(tmp, G1, 2, Dxz)
 *     correlate1d(tmp2, G2, 0, tmp); correlate1d(tmp, Gn, 2, Dxx)             # <<<<<<<<<<<<<<
 * 
 *     # Outputs never differentiated along the z-axis
 */
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_4 = __pyx_v_correlate1d; __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, ((PyObject *)__pyx_v_tmp2), ((PyObject *)__pyx_v_G2), __pyx_int_0, ((PyObject *)__pyx_v_tmp)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, ((PyObject *)__pyx_v_tmp2), ((PyObject *)__pyx_v_G2), __pyx_int_0, ((PyObject *)__pyx_v_tmp)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp2));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp2));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, ((PyObject *)__pyx_v_tmp2));
    __Pyx_INCREF(((PyObject *)__pyx_v_G2));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_G2));
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, ((PyObject *)__pyx_v_G2));
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_7, __pyx_int_0);
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_7, ((PyObject *)__pyx_v_tmp));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_4 = __pyx_v_correlate1d; __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, ((PyObject *)__pyx_v_tmp), ((PyObject *)__pyx_v_Gn), __pyx_int_2, ((PyObject *)__pyx_v_Dxx)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, ((PyObject *)__pyx_v_tmp), ((PyObject *)__pyx_v_Gn), __pyx_int_2, ((PyObject *)__pyx_v_Dxx)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, ((PyObject *)__pyx_v_tmp));
    __Pyx_INCREF(((PyObject *)__pyx_v_Gn));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_Gn));
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, ((PyObject *)__pyx_v_Gn));
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_7, __pyx_int_2);
    __Pyx_INCREF(((PyObject *)__pyx_v_Dxx));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_Dxx));
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_7, ((PyObject *)__pyx_v_Dxx));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":361
 * 
 *     # Outputs never differentiated along the z-axis
 *     correlate1d(im, Gn, 2, tmp2)             # <<<<<<<<<<<<<<
 *     correlate1d(tmp2, G1, 0, tmp); correlate1d(tmp, G1, 1, Dxy)
 * 
 */
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_4 = __pyx_v_correlate1d; __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, ((PyObject *)__pyx_v_im), ((PyObject *)__pyx_v_Gn), __pyx_int_2, ((PyObject *)__pyx_v_tmp2)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, ((PyObject *)__pyx_v_im), ((PyObject *)__pyx_v_Gn), __pyx_int_2, ((PyObject *)__pyx_v_tmp2)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_im));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_im));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, ((PyObject *)__pyx_v_im));
    __Pyx_INCREF(((PyObject *)__pyx_v_Gn));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_Gn));
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, ((PyObject *)__pyx_v_Gn));
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_7, __pyx_int_2);
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp2));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp2));
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_7, ((PyObject *)__pyx_v_tmp2));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":362
 *     # Outputs never differentiated along the z-axis
 *     correlate1d(im, Gn, 2, tmp2)
 *     correlate1d(tmp2, G1, 0, tmp); correlate1d(tmp, G1, 1, Dxy)             # <<<<<<<<<<<<<<
 * 
 *     # Scale all
 */
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_4 = __pyx_v_correlate1d; __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, ((PyObject *)__pyx_v_tmp2), ((PyObject *)__pyx_v_G1), __pyx_int_0, ((PyObject *)__pyx_v_tmp)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, ((PyObject *)__pyx_v_tmp2), ((PyObject *)__pyx_v_G1), __pyx_int_0, ((PyObject *)__pyx_v_tmp)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp2));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp2));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, ((PyObject *)__pyx_v_tmp2));
    __Pyx_INCREF(((PyObject *)__pyx_v_G1));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_G1));
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, ((PyObject *)__pyx_v_G1));
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_7, __pyx_int_0);
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_7, ((PyObject *)__pyx_v_tmp));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_v_correlate1d);
  __pyx_t_4 = __pyx_v_correlate1d; __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, ((PyObject *)__pyx_v_tmp), ((PyObject *)__pyx_v_G1), __pyx_int_1, ((PyObject *)__pyx_v_Dxy)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, ((PyObject *)__pyx_v_tmp), ((PyObject *)__pyx_v_G1), __pyx_int_1, ((PyObject *)__pyx_v_Dxy)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, ((PyObject *)__pyx_v_tmp));
    __Pyx_INCREF(((PyObject *)__pyx_v_G1));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_G1));
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, ((PyObject *)__pyx_v_G1));
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_7, __pyx_int_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_Dxy));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_Dxy));
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_7, ((PyObject *)__pyx_v_Dxy));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":365
 * 
 *     # Scale all
 *     c = 2.0/(sqrt(2.0*M_PI*M_PI*M_PI)*(sigma2*sigma2*sigma))             # <<<<<<<<<<<<<<
 *     Dxx *= c; Dyy *= c; Dzz *= c; Dxy *= c; Dxz *= c; Dyz *= c
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble((((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl)2.0) / (sqrt((((2.0 * M_PI) * M_PI) * M_PI)) * ((__pyx_v_sigma2 * __pyx_v_sigma2) * __pyx_v_sigma)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_c = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":366
 *     # Scale all
 *     c = 2.0/(sqrt(2.0*M_PI*M_PI*M_PI)*(sigma2*sigma2*sigma))
 *     Dxx *= c; Dyy *= c; Dzz *= c; Dxy *= c; Dxz *= c; Dyz *= c             # <<<<<<<<<<<<<<
 * 
 * cdef bint eig3volume(intp N, dbl_p Dxx, dbl_p Dxy, dbl_p Dxz, dbl_p Dyy, dbl_p Dyz, dbl_p Dzz, bint return_vec=False) nogil:
 */
  __pyx_t_1 = PyNumber_InPlaceMultiply(((PyObject *)__pyx_v_Dxx), __pyx_v_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10npy_helper_ndarray))))) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_Dxx, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_InPlaceMultiply(((PyObject *)__pyx_v_Dyy), __pyx_v_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10npy_helper_ndarray))))) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_Dyy, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_InPlaceMultiply(((PyObject *)__pyx_v_Dzz), __pyx_v_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10npy_helper_ndarray))))) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_Dzz, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_InPlaceMultiply(((PyObject *)__pyx_v_Dxy), __pyx_v_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10npy_helper_ndarray))))) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_Dxy, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_InPlaceMultiply(((PyObject *)__pyx_v_Dxz), __pyx_v_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10npy_helper_ndarray))))) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_Dxz, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_InPlaceMultiply(((PyObject *)__pyx_v_Dyz), __pyx_v_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10npy_helper_ndarray))))) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_Dyz, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":303
 *     return (out,sigs,vecx,vecy,vecz) if return_full else out
 * 
 * cdef void hessian3(ndarray im, dbl sigma, ndarray Dxx, ndarray Dxy, ndarray Dxz, ndarray Dyy, ndarray Dyz, ndarray Dzz, ndarray tmp):             # <<<<<<<<<<<<<<
 *     """
 *     Filters an image with the 2nd derivatives of a Gaussian with parameter `sigma`. This
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("pysegtools.images.filters._frangi.hessian3", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_exp);
  __Pyx_XDECREF(__pyx_v_correlate1d);
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XDECREF((PyObject *)__pyx_v_i2);
  __Pyx_XDECREF((PyObject *)__pyx_v_Gn);
  __Pyx_XDECREF((PyObject *)__pyx_v_G1);
  __Pyx_XDECREF((PyObject *)__pyx_v_G2);
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp2);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF((PyObject *)__pyx_v_Dxx);
  __Pyx_XDECREF((PyObject *)__pyx_v_Dxy);
  __Pyx_XDECREF((PyObject *)__pyx_v_Dxz);
  __Pyx_XDECREF((PyObject *)__pyx_v_Dyy);
  __Pyx_XDECREF((PyObject *)__pyx_v_Dyz);
  __Pyx_XDECREF((PyObject *)__pyx_v_Dzz);
  __Pyx_RefNannyFinishContext();
}

/* "pysegtools/images/filters/_frangi.pyx":368
 *     Dxx *= c; Dyy *= c; Dzz *= c; Dxy *= c; Dxz *= c; Dyz *= c
 * 
 * cdef bint eig3volume(intp N, dbl_p Dxx, dbl_p Dxy, dbl_p Dxz, dbl_p Dyy, dbl_p Dyz, dbl_p Dzz, bint return_vec=False) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Calculate the eigenvalues and possibly the eigenvectors from the Hessian matrix of an image
 */

static int __pyx_f_10pysegtools_6images_7filters_7_frangi_eig3volume(__pyx_t_10npy_helper_intp __pyx_v_N, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_Dxx, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_Dxy, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_Dxz, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_Dyy, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_Dyz, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_Dzz, struct __pyx_opt_args_10pysegtools_6images_7filters_7_frangi_eig3volume *__pyx_optional_args) {
  int __pyx_v_return_vec = ((int)0);
  __pyx_t_10npy_helper_intp __pyx_v_i;
  int __pyx_v_retval;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_eigs[3];
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_vec_temp[3];
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p __pyx_v_vec;
  int __pyx_r;
  void *__pyx_t_1;
  __pyx_t_10npy_helper_intp __pyx_t_2;
  __pyx_t_10npy_helper_intp __pyx_t_3;
  int __pyx_t_4;
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_return_vec = __pyx_optional_args->return_vec;
    }
  }

  /* "pysegtools/images/filters/_frangi.pyx":391
 *     cdef int retval
 *     cdef dbl[3] eigs, vec_temp # temporary eigenvalues and eigenvectors
 *     cdef dbl_p vec = <dbl_p>(vec_temp if return_vec else NULL)             # <<<<<<<<<<<<<<
 *     for i in xrange(N):
 *         # Compute the eigenvalues/eigenvectors
 */
  if ((__pyx_v_return_vec != 0)) {
    __pyx_t_1 = __pyx_v_vec_temp;
  } else {
    __pyx_t_1 = NULL;
  }
  __pyx_v_vec = ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl_p)__pyx_t_1);

  /* "pysegtools/images/filters/_frangi.pyx":392
 *     cdef dbl[3] eigs, vec_temp # temporary eigenvalues and eigenvectors
 *     cdef dbl_p vec = <dbl_p>(vec_temp if return_vec else NULL)
 *     for i in xrange(N):             # <<<<<<<<<<<<<<
 *         # Compute the eigenvalues/eigenvectors
 *         retval = eig_calc(Dxx[i], Dxy[i], Dxz[i], Dyy[i], Dyz[i], Dzz[i], eigs, vec)
 */
  __pyx_t_2 = __pyx_v_N;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "pysegtools/images/filters/_frangi.pyx":394
 *     for i in xrange(N):
 *         # Compute the eigenvalues/eigenvectors
 *         retval = eig_calc(Dxx[i], Dxy[i], Dxz[i], Dyy[i], Dyz[i], Dzz[i], eigs, vec)             # <<<<<<<<<<<<<<
 *         if retval != 0: break
 *         # Store values
 */
    __pyx_v_retval = __pyx_f_10pysegtools_6images_7filters_7_frangi_eig_calc((__pyx_v_Dxx[__pyx_v_i]), (__pyx_v_Dxy[__pyx_v_i]), (__pyx_v_Dxz[__pyx_v_i]), (__pyx_v_Dyy[__pyx_v_i]), (__pyx_v_Dyz[__pyx_v_i]), (__pyx_v_Dzz[__pyx_v_i]), __pyx_v_eigs, __pyx_v_vec);

    /* "pysegtools/images/filters/_frangi.pyx":395
 *         # Compute the eigenvalues/eigenvectors
 *         retval = eig_calc(Dxx[i], Dxy[i], Dxz[i], Dyy[i], Dyz[i], Dzz[i], eigs, vec)
 *         if retval != 0: break             # <<<<<<<<<<<<<<
 *         # Store values
 *         Dxx[i] = eigs[0]; Dxy[i] = eigs[1]; Dxz[i] = eigs[2]
 */
    __pyx_t_4 = ((__pyx_v_retval != 0) != 0);
    if (__pyx_t_4) {
      goto __pyx_L4_break;
    }

    /* "pysegtools/images/filters/_frangi.pyx":397
 *         if retval != 0: break
 *         # Store values
 *         Dxx[i] = eigs[0]; Dxy[i] = eigs[1]; Dxz[i] = eigs[2]             # <<<<<<<<<<<<<<
 *         if return_vec: Dyy[i] = vec[0]; Dyz[i] = vec[1]; Dzz[i] = vec[2]
 *     return retval
 */
    (__pyx_v_Dxx[__pyx_v_i]) = (__pyx_v_eigs[0]);
    (__pyx_v_Dxy[__pyx_v_i]) = (__pyx_v_eigs[1]);
    (__pyx_v_Dxz[__pyx_v_i]) = (__pyx_v_eigs[2]);

    /* "pysegtools/images/filters/_frangi.pyx":398
 *         # Store values
 *         Dxx[i] = eigs[0]; Dxy[i] = eigs[1]; Dxz[i] = eigs[2]
 *         if return_vec: Dyy[i] = vec[0]; Dyz[i] = vec[1]; Dzz[i] = vec[2]             # <<<<<<<<<<<<<<
 *     return retval
 * 
 */
    __pyx_t_4 = (__pyx_v_return_vec != 0);
    if (__pyx_t_4) {
      (__pyx_v_Dyy[__pyx_v_i]) = (__pyx_v_vec[0]);
      (__pyx_v_Dyz[__pyx_v_i]) = (__pyx_v_vec[1]);
      (__pyx_v_Dzz[__pyx_v_i]) = (__pyx_v_vec[2]);
    }
  }
  __pyx_L4_break:;

  /* "pysegtools/images/filters/_frangi.pyx":399
 *         Dxx[i] = eigs[0]; Dxy[i] = eigs[1]; Dxz[i] = eigs[2]
 *         if return_vec: Dyy[i] = vec[0]; Dyz[i] = vec[1]; Dzz[i] = vec[2]
 *     return retval             # <<<<<<<<<<<<<<
 * 
 * cdef bint eig_calc(dbl Dxx, dbl Dxy, dbl Dxz, dbl Dyy, dbl Dyz, dbl Dzz, dbl[3] eigs, dbl[3] vec) nogil:
 */
  __pyx_r = __pyx_v_retval;
  goto __pyx_L0;

  /* "pysegtools/images/filters/_frangi.pyx":368
 *     Dxx *= c; Dyy *= c; Dzz *= c; Dxy *= c; Dxz *= c; Dyz *= c
 * 
 * cdef bint eig3volume(intp N, dbl_p Dxx, dbl_p Dxy, dbl_p Dxz, dbl_p Dyy, dbl_p Dyz, dbl_p Dzz, bint return_vec=False) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Calculate the eigenvalues and possibly the eigenvectors from the Hessian matrix of an image
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "pysegtools/images/filters/_frangi.pyx":401
 *     return retval
 * 
 * cdef bint eig_calc(dbl Dxx, dbl Dxy, dbl Dxz, dbl Dyy, dbl Dyz, dbl Dzz, dbl[3] eigs, dbl[3] vec) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Internal function that calculates a single set of eigenvalues and possibly the minimal
 */

static int __pyx_f_10pysegtools_6images_7filters_7_frangi_eig_calc(__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_Dxx, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_Dxy, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_Dxz, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_Dyy, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_Dyz, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_Dzz, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl *__pyx_v_eigs, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl *__pyx_v_vec) {
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_A11;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_A12;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_A13;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_A22;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_A23;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_A33;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_tr;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_p2;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_p;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_q;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_r;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_phi;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl *__pyx_v_eigs_abs;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_eps;
  int __pyx_r;
  int __pyx_t_1;
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_t_2[3];
  int __pyx_t_3;

  /* "pysegtools/images/filters/_frangi.pyx":409
 *     """
 *     # Calculate eignvalues
 *     cdef dbl A11 = Dxx, A12 = Dxy, A13 = Dxz, A22 = Dyy, A23 = Dyz, A33 = Dzz             # <<<<<<<<<<<<<<
 *     cdef dbl tr, p2, p, q, r, phi #, eig1, eig2, eig3
 *     p = A12*A12 + A13*A13 + A23*A23
 */
  __pyx_v_A11 = __pyx_v_Dxx;
  __pyx_v_A12 = __pyx_v_Dxy;
  __pyx_v_A13 = __pyx_v_Dxz;
  __pyx_v_A22 = __pyx_v_Dyy;
  __pyx_v_A23 = __pyx_v_Dyz;
  __pyx_v_A33 = __pyx_v_Dzz;

  /* "pysegtools/images/filters/_frangi.pyx":411
 *     cdef dbl A11 = Dxx, A12 = Dxy, A13 = Dxz, A22 = Dyy, A23 = Dyz, A33 = Dzz
 *     cdef dbl tr, p2, p, q, r, phi #, eig1, eig2, eig3
 *     p = A12*A12 + A13*A13 + A23*A23             # <<<<<<<<<<<<<<
 *     if p == 0.0:
 *         # Diagonal matrix; eigenvalues are unsorted
 */
  __pyx_v_p = (((__pyx_v_A12 * __pyx_v_A12) + (__pyx_v_A13 * __pyx_v_A13)) + (__pyx_v_A23 * __pyx_v_A23));

  /* "pysegtools/images/filters/_frangi.pyx":412
 *     cdef dbl tr, p2, p, q, r, phi #, eig1, eig2, eig3
 *     p = A12*A12 + A13*A13 + A23*A23
 *     if p == 0.0:             # <<<<<<<<<<<<<<
 *         # Diagonal matrix; eigenvalues are unsorted
 *         eigs[0] = A11; eigs[1] = A22; eigs[2] = A33
 */
  __pyx_t_1 = ((__pyx_v_p == 0.0) != 0);
  if (__pyx_t_1) {

    /* "pysegtools/images/filters/_frangi.pyx":414
 *     if p == 0.0:
 *         # Diagonal matrix; eigenvalues are unsorted
 *         eigs[0] = A11; eigs[1] = A22; eigs[2] = A33             # <<<<<<<<<<<<<<
 *     else:
 *         tr = A11 + A22 + A33 # trace(A)
 */
    (__pyx_v_eigs[0]) = __pyx_v_A11;
    (__pyx_v_eigs[1]) = __pyx_v_A22;
    (__pyx_v_eigs[2]) = __pyx_v_A33;

    /* "pysegtools/images/filters/_frangi.pyx":412
 *     cdef dbl tr, p2, p, q, r, phi #, eig1, eig2, eig3
 *     p = A12*A12 + A13*A13 + A23*A23
 *     if p == 0.0:             # <<<<<<<<<<<<<<
 *         # Diagonal matrix; eigenvalues are unsorted
 *         eigs[0] = A11; eigs[1] = A22; eigs[2] = A33
 */
    goto __pyx_L3;
  }

  /* "pysegtools/images/filters/_frangi.pyx":416
 *         eigs[0] = A11; eigs[1] = A22; eigs[2] = A33
 *     else:
 *         tr = A11 + A22 + A33 # trace(A)             # <<<<<<<<<<<<<<
 *         q = tr/3.0
 *         A11 -= q; A22 -= q; A33 -= q
 */
  /*else*/ {
    __pyx_v_tr = ((__pyx_v_A11 + __pyx_v_A22) + __pyx_v_A33);

    /* "pysegtools/images/filters/_frangi.pyx":417
 *     else:
 *         tr = A11 + A22 + A33 # trace(A)
 *         q = tr/3.0             # <<<<<<<<<<<<<<
 *         A11 -= q; A22 -= q; A33 -= q
 *         p2 = (A11*A11 + A22*A22 + A33*A33 + 2.0*p) / 6.0
 */
    __pyx_v_q = (__pyx_v_tr / ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl)3.0));

    /* "pysegtools/images/filters/_frangi.pyx":418
 *         tr = A11 + A22 + A33 # trace(A)
 *         q = tr/3.0
 *         A11 -= q; A22 -= q; A33 -= q             # <<<<<<<<<<<<<<
 *         p2 = (A11*A11 + A22*A22 + A33*A33 + 2.0*p) / 6.0
 *         p = sqrt(p2)         # p = ||A-qI||/sqrt(6)
 */
    __pyx_v_A11 = (__pyx_v_A11 - __pyx_v_q);
    __pyx_v_A22 = (__pyx_v_A22 - __pyx_v_q);
    __pyx_v_A33 = (__pyx_v_A33 - __pyx_v_q);

    /* "pysegtools/images/filters/_frangi.pyx":419
 *         q = tr/3.0
 *         A11 -= q; A22 -= q; A33 -= q
 *         p2 = (A11*A11 + A22*A22 + A33*A33 + 2.0*p) / 6.0             # <<<<<<<<<<<<<<
 *         p = sqrt(p2)         # p = ||A-qI||/sqrt(6)
 *         r = A11*(A22*A33-A23*A23) - A12*(A12*A33-A23*A13) + A13*(A12*A23-A22*A13)
 */
    __pyx_v_p2 = (((((__pyx_v_A11 * __pyx_v_A11) + (__pyx_v_A22 * __pyx_v_A22)) + (__pyx_v_A33 * __pyx_v_A33)) + (2.0 * __pyx_v_p)) / ((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl)6.0));

    /* "pysegtools/images/filters/_frangi.pyx":420
 *         A11 -= q; A22 -= q; A33 -= q
 *         p2 = (A11*A11 + A22*A22 + A33*A33 + 2.0*p) / 6.0
 *         p = sqrt(p2)         # p = ||A-qI||/sqrt(6)             # <<<<<<<<<<<<<<
 *         r = A11*(A22*A33-A23*A23) - A12*(A12*A33-A23*A13) + A13*(A12*A23-A22*A13)
 *         r *= 1.0/(2.0*p2*p)  # r = |A-qI|/(2*p^3)
 */
    __pyx_v_p = sqrt(__pyx_v_p2);

    /* "pysegtools/images/filters/_frangi.pyx":421
 *         p2 = (A11*A11 + A22*A22 + A33*A33 + 2.0*p) / 6.0
 *         p = sqrt(p2)         # p = ||A-qI||/sqrt(6)
 *         r = A11*(A22*A33-A23*A23) - A12*(A12*A33-A23*A13) + A13*(A12*A23-A22*A13)             # <<<<<<<<<<<<<<
 *         r *= 1.0/(2.0*p2*p)  # r = |A-qI|/(2*p^3)
 *         # Due to rounding errors r may be just outside [-1, 1] which is invalid for the acos function
 */
    __pyx_v_r = (((__pyx_v_A11 * ((__pyx_v_A22 * __pyx_v_A33) - (__pyx_v_A23 * __pyx_v_A23))) - (__pyx_v_A12 * ((__pyx_v_A12 * __pyx_v_A33) - (__pyx_v_A23 * __pyx_v_A13)))) + (__pyx_v_A13 * ((__pyx_v_A12 * __pyx_v_A23) - (__pyx_v_A22 * __pyx_v_A13))));

    /* "pysegtools/images/filters/_frangi.pyx":422
 *         p = sqrt(p2)         # p = ||A-qI||/sqrt(6)
 *         r = A11*(A22*A33-A23*A23) - A12*(A12*A33-A23*A13) + A13*(A12*A23-A22*A13)
 *         r *= 1.0/(2.0*p2*p)  # r = |A-qI|/(2*p^3)             # <<<<<<<<<<<<<<
 *         # Due to rounding errors r may be just outside [-1, 1] which is invalid for the acos function
 *         if   r <= -1.0: r = -1.0
 */
    __pyx_v_r = (__pyx_v_r * (((__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl)1.0) / ((2.0 * __pyx_v_p2) * __pyx_v_p)));

    /* "pysegtools/images/filters/_frangi.pyx":424
 *         r *= 1.0/(2.0*p2*p)  # r = |A-qI|/(2*p^3)
 *         # Due to rounding errors r may be just outside [-1, 1] which is invalid for the acos function
 *         if   r <= -1.0: r = -1.0             # <<<<<<<<<<<<<<
 *         elif r >=  1.0: r = 1.0
 *         phi = acos(r)/3.0
 */
    __pyx_t_1 = ((__pyx_v_r <= -1.0) != 0);
    if (__pyx_t_1) {
      __pyx_v_r = -1.0;
      goto __pyx_L4;
    }

    /* "pysegtools/images/filters/_frangi.pyx":425
 *         # Due to rounding errors r may be just outside [-1, 1] which is invalid for the acos function
 *         if   r <= -1.0: r = -1.0
 *         elif r >=  1.0: r = 1.0             # <<<<<<<<<<<<<<
 *         phi = acos(r)/3.0
 *         # Eigenvalues are sorted in ascending order
 */
    __pyx_t_1 = ((__pyx_v_r >= 1.0) != 0);
    if (__pyx_t_1) {
      __pyx_v_r = 1.0;
    }
    __pyx_L4:;

    /* "pysegtools/images/filters/_frangi.pyx":426
 *         if   r <= -1.0: r = -1.0
 *         elif r >=  1.0: r = 1.0
 *         phi = acos(r)/3.0             # <<<<<<<<<<<<<<
 *         # Eigenvalues are sorted in ascending order
 *         eigs[2] = q + 2.0*p*cos(phi)
 */
    __pyx_v_phi = (acos(__pyx_v_r) / 3.0);

    /* "pysegtools/images/filters/_frangi.pyx":428
 *         phi = acos(r)/3.0
 *         # Eigenvalues are sorted in ascending order
 *         eigs[2] = q + 2.0*p*cos(phi)             # <<<<<<<<<<<<<<
 *         eigs[0] = q + 2.0*p*cos(phi + (2.0*M_PI/3.0))
 *         eigs[1] = tr - eigs[0] - eigs[2] # trace(A) = eig1 + eig2 + eig3
 */
    (__pyx_v_eigs[2]) = (__pyx_v_q + ((2.0 * __pyx_v_p) * cos(__pyx_v_phi)));

    /* "pysegtools/images/filters/_frangi.pyx":429
 *         # Eigenvalues are sorted in ascending order
 *         eigs[2] = q + 2.0*p*cos(phi)
 *         eigs[0] = q + 2.0*p*cos(phi + (2.0*M_PI/3.0))             # <<<<<<<<<<<<<<
 *         eigs[1] = tr - eigs[0] - eigs[2] # trace(A) = eig1 + eig2 + eig3
 * 
 */
    (__pyx_v_eigs[0]) = (__pyx_v_q + ((2.0 * __pyx_v_p) * cos((__pyx_v_phi + ((2.0 * M_PI) / 3.0)))));

    /* "pysegtools/images/filters/_frangi.pyx":430
 *         eigs[2] = q + 2.0*p*cos(phi)
 *         eigs[0] = q + 2.0*p*cos(phi + (2.0*M_PI/3.0))
 *         eigs[1] = tr - eigs[0] - eigs[2] # trace(A) = eig1 + eig2 + eig3             # <<<<<<<<<<<<<<
 * 
 *     # Sort eigenvalues by absolute value
 */
    (__pyx_v_eigs[1]) = ((__pyx_v_tr - (__pyx_v_eigs[0])) - (__pyx_v_eigs[2]));
  }
  __pyx_L3:;

  /* "pysegtools/images/filters/_frangi.pyx":433
 * 
 *     # Sort eigenvalues by absolute value
 *     cdef dbl* eigs_abs = [fabs(eigs[0]), fabs(eigs[1]), fabs(eigs[2])]             # <<<<<<<<<<<<<<
 *     if eigs_abs[1] < eigs_abs[0]:
 *         p = eigs[0]
 */
  __pyx_t_2[0] = fabs((__pyx_v_eigs[0]));
  __pyx_t_2[1] = fabs((__pyx_v_eigs[1]));
  __pyx_t_2[2] = fabs((__pyx_v_eigs[2]));
  __pyx_v_eigs_abs = __pyx_t_2;

  /* "pysegtools/images/filters/_frangi.pyx":434
 *     # Sort eigenvalues by absolute value
 *     cdef dbl* eigs_abs = [fabs(eigs[0]), fabs(eigs[1]), fabs(eigs[2])]
 *     if eigs_abs[1] < eigs_abs[0]:             # <<<<<<<<<<<<<<
 *         p = eigs[0]
 *         if   eigs_abs[2] < eigs_abs[1]: eigs[0] = eigs[2]; eigs[2] = p
 */
  __pyx_t_1 = (((__pyx_v_eigs_abs[1]) < (__pyx_v_eigs_abs[0])) != 0);
  if (__pyx_t_1) {

    /* "pysegtools/images/filters/_frangi.pyx":435
 *     cdef dbl* eigs_abs = [fabs(eigs[0]), fabs(eigs[1]), fabs(eigs[2])]
 *     if eigs_abs[1] < eigs_abs[0]:
 *         p = eigs[0]             # <<<<<<<<<<<<<<
 *         if   eigs_abs[2] < eigs_abs[1]: eigs[0] = eigs[2]; eigs[2] = p
 *         elif eigs_abs[2] < eigs_abs[0]: eigs[0] = eigs[1]; eigs[1] = eigs[2]; eigs[2] = p
 */
    __pyx_v_p = (__pyx_v_eigs[0]);

    /* "pysegtools/images/filters/_frangi.pyx":436
 *     if eigs_abs[1] < eigs_abs[0]:
 *         p = eigs[0]
 *         if   eigs_abs[2] < eigs_abs[1]: eigs[0] = eigs[2]; eigs[2] = p             # <<<<<<<<<<<<<<
 *         elif eigs_abs[2] < eigs_abs[0]: eigs[0] = eigs[1]; eigs[1] = eigs[2]; eigs[2] = p
 *         else:                           eigs[0] = eigs[1]; eigs[1] = p
 */
    __pyx_t_1 = (((__pyx_v_eigs_abs[2]) < (__pyx_v_eigs_abs[1])) != 0);
    if (__pyx_t_1) {
      (__pyx_v_eigs[0]) = (__pyx_v_eigs[2]);
      (__pyx_v_eigs[2]) = __pyx_v_p;
      goto __pyx_L6;
    }

    /* "pysegtools/images/filters/_frangi.pyx":437
 *         p = eigs[0]
 *         if   eigs_abs[2] < eigs_abs[1]: eigs[0] = eigs[2]; eigs[2] = p
 *         elif eigs_abs[2] < eigs_abs[0]: eigs[0] = eigs[1]; eigs[1] = eigs[2]; eigs[2] = p             # <<<<<<<<<<<<<<
 *         else:                           eigs[0] = eigs[1]; eigs[1] = p
 *     elif eigs_abs[2] < eigs_abs[1]:
 */
    __pyx_t_1 = (((__pyx_v_eigs_abs[2]) < (__pyx_v_eigs_abs[0])) != 0);
    if (__pyx_t_1) {
      (__pyx_v_eigs[0]) = (__pyx_v_eigs[1]);
      (__pyx_v_eigs[1]) = (__pyx_v_eigs[2]);
      (__pyx_v_eigs[2]) = __pyx_v_p;
      goto __pyx_L6;
    }

    /* "pysegtools/images/filters/_frangi.pyx":438
 *         if   eigs_abs[2] < eigs_abs[1]: eigs[0] = eigs[2]; eigs[2] = p
 *         elif eigs_abs[2] < eigs_abs[0]: eigs[0] = eigs[1]; eigs[1] = eigs[2]; eigs[2] = p
 *         else:                           eigs[0] = eigs[1]; eigs[1] = p             # <<<<<<<<<<<<<<
 *     elif eigs_abs[2] < eigs_abs[1]:
 *         p = eigs[2]; eigs[2] = eigs[1]
 */
    /*else*/ {
      (__pyx_v_eigs[0]) = (__pyx_v_eigs[1]);
      (__pyx_v_eigs[1]) = __pyx_v_p;
    }
    __pyx_L6:;

    /* "pysegtools/images/filters/_frangi.pyx":434
 *     # Sort eigenvalues by absolute value
 *     cdef dbl* eigs_abs = [fabs(eigs[0]), fabs(eigs[1]), fabs(eigs[2])]
 *     if eigs_abs[1] < eigs_abs[0]:             # <<<<<<<<<<<<<<
 *         p = eigs[0]
 *         if   eigs_abs[2] < eigs_abs[1]: eigs[0] = eigs[2]; eigs[2] = p
 */
    goto __pyx_L5;
  }

  /* "pysegtools/images/filters/_frangi.pyx":439
 *         elif eigs_abs[2] < eigs_abs[0]: eigs[0] = eigs[1]; eigs[1] = eigs[2]; eigs[2] = p
 *         else:                           eigs[0] = eigs[1]; eigs[1] = p
 *     elif eigs_abs[2] < eigs_abs[1]:             # <<<<<<<<<<<<<<
 *         p = eigs[2]; eigs[2] = eigs[1]
 *         if eigs_abs[2] < eigs_abs[0]: eigs[1] = eigs[0]; eigs[0] = p
 */
  __pyx_t_1 = (((__pyx_v_eigs_abs[2]) < (__pyx_v_eigs_abs[1])) != 0);
  if (__pyx_t_1) {

    /* "pysegtools/images/filters/_frangi.pyx":440
 *         else:                           eigs[0] = eigs[1]; eigs[1] = p
 *     elif eigs_abs[2] < eigs_abs[1]:
 *         p = eigs[2]; eigs[2] = eigs[1]             # <<<<<<<<<<<<<<
 *         if eigs_abs[2] < eigs_abs[0]: eigs[1] = eigs[0]; eigs[0] = p
 *         else:                         eigs[1] = p
 */
    __pyx_v_p = (__pyx_v_eigs[2]);
    (__pyx_v_eigs[2]) = (__pyx_v_eigs[1]);

    /* "pysegtools/images/filters/_frangi.pyx":441
 *     elif eigs_abs[2] < eigs_abs[1]:
 *         p = eigs[2]; eigs[2] = eigs[1]
 *         if eigs_abs[2] < eigs_abs[0]: eigs[1] = eigs[0]; eigs[0] = p             # <<<<<<<<<<<<<<
 *         else:                         eigs[1] = p
 * 
 */
    __pyx_t_1 = (((__pyx_v_eigs_abs[2]) < (__pyx_v_eigs_abs[0])) != 0);
    if (__pyx_t_1) {
      (__pyx_v_eigs[1]) = (__pyx_v_eigs[0]);
      (__pyx_v_eigs[0]) = __pyx_v_p;
      goto __pyx_L7;
    }

    /* "pysegtools/images/filters/_frangi.pyx":442
 *         p = eigs[2]; eigs[2] = eigs[1]
 *         if eigs_abs[2] < eigs_abs[0]: eigs[1] = eigs[0]; eigs[0] = p
 *         else:                         eigs[1] = p             # <<<<<<<<<<<<<<
 * 
 *     # Check if calculating vectors
 */
    /*else*/ {
      (__pyx_v_eigs[1]) = __pyx_v_p;
    }
    __pyx_L7:;

    /* "pysegtools/images/filters/_frangi.pyx":439
 *         elif eigs_abs[2] < eigs_abs[0]: eigs[0] = eigs[1]; eigs[1] = eigs[2]; eigs[2] = p
 *         else:                           eigs[0] = eigs[1]; eigs[1] = p
 *     elif eigs_abs[2] < eigs_abs[1]:             # <<<<<<<<<<<<<<
 *         p = eigs[2]; eigs[2] = eigs[1]
 *         if eigs_abs[2] < eigs_abs[0]: eigs[1] = eigs[0]; eigs[0] = p
 */
  }
  __pyx_L5:;

  /* "pysegtools/images/filters/_frangi.pyx":445
 * 
 *     # Check if calculating vectors
 *     if vec is NULL: return False             # <<<<<<<<<<<<<<
 *     A11 = Dxx; A22 = Dyy; A33 = Dzz # reset these values, the eigenvalue calculations changes them
 * 
 */
  __pyx_t_1 = ((__pyx_v_vec == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "pysegtools/images/filters/_frangi.pyx":446
 *     # Check if calculating vectors
 *     if vec is NULL: return False
 *     A11 = Dxx; A22 = Dyy; A33 = Dzz # reset these values, the eigenvalue calculations changes them             # <<<<<<<<<<<<<<
 * 
 *     # Calculate eigenvectors
 */
  __pyx_v_A11 = __pyx_v_Dxx;
  __pyx_v_A22 = __pyx_v_Dyy;
  __pyx_v_A33 = __pyx_v_Dzz;

  /* "pysegtools/images/filters/_frangi.pyx":451
 *     # Check if the minimum eigenvalue is along the diagonal and the only non-zero in its row/column
 *     # If so, the corresponding eigenvector is one of [1,0,0], [0,1,0], or [0,0,1]
 *     r = eigs[0]             # <<<<<<<<<<<<<<
 *     cdef dbl eps = (1.0e6*DBL_EPSILON)*fabs(r)
 *     if fabs(A11-r) <= eps and fabs(A12) <= eps and fabs(A13) <= eps: vec[0] = 1.0; vec[1] = vec[2] = 0.0; return False
 */
  __pyx_v_r = (__pyx_v_eigs[0]);

  /* "pysegtools/images/filters/_frangi.pyx":452
 *     # If so, the corresponding eigenvector is one of [1,0,0], [0,1,0], or [0,0,1]
 *     r = eigs[0]
 *     cdef dbl eps = (1.0e6*DBL_EPSILON)*fabs(r)             # <<<<<<<<<<<<<<
 *     if fabs(A11-r) <= eps and fabs(A12) <= eps and fabs(A13) <= eps: vec[0] = 1.0; vec[1] = vec[2] = 0.0; return False
 *     if fabs(A22-r) <= eps and fabs(A12) <= eps and fabs(A23) <= eps: vec[1] = 1.0; vec[0] = vec[2] = 0.0; return False
 */
  __pyx_v_eps = ((1.0e6 * DBL_EPSILON) * fabs(__pyx_v_r));

  /* "pysegtools/images/filters/_frangi.pyx":453
 *     r = eigs[0]
 *     cdef dbl eps = (1.0e6*DBL_EPSILON)*fabs(r)
 *     if fabs(A11-r) <= eps and fabs(A12) <= eps and fabs(A13) <= eps: vec[0] = 1.0; vec[1] = vec[2] = 0.0; return False             # <<<<<<<<<<<<<<
 *     if fabs(A22-r) <= eps and fabs(A12) <= eps and fabs(A23) <= eps: vec[1] = 1.0; vec[0] = vec[2] = 0.0; return False
 *     if fabs(A33-r) <= eps and fabs(A13) <= eps and fabs(A23) <= eps: vec[2] = 1.0; vec[0] = vec[1] = 0.0; return False
 */
  __pyx_t_3 = ((fabs((__pyx_v_A11 - __pyx_v_r)) <= __pyx_v_eps) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_3 = ((fabs(__pyx_v_A12) <= __pyx_v_eps) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_3 = ((fabs(__pyx_v_A13) <= __pyx_v_eps) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L10_bool_binop_done:;
  if (__pyx_t_1) {
    (__pyx_v_vec[0]) = 1.0;
    (__pyx_v_vec[1]) = 0.0;
    (__pyx_v_vec[2]) = 0.0;
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "pysegtools/images/filters/_frangi.pyx":454
 *     cdef dbl eps = (1.0e6*DBL_EPSILON)*fabs(r)
 *     if fabs(A11-r) <= eps and fabs(A12) <= eps and fabs(A13) <= eps: vec[0] = 1.0; vec[1] = vec[2] = 0.0; return False
 *     if fabs(A22-r) <= eps and fabs(A12) <= eps and fabs(A23) <= eps: vec[1] = 1.0; vec[0] = vec[2] = 0.0; return False             # <<<<<<<<<<<<<<
 *     if fabs(A33-r) <= eps and fabs(A13) <= eps and fabs(A23) <= eps: vec[2] = 1.0; vec[0] = vec[1] = 0.0; return False
 *     # Calculate the columns of (A-pI)*(A-qI) where p and q are the non-minimal eigenvalues and if a column
 */
  __pyx_t_3 = ((fabs((__pyx_v_A22 - __pyx_v_r)) <= __pyx_v_eps) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_3 = ((fabs(__pyx_v_A12) <= __pyx_v_eps) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_3 = ((fabs(__pyx_v_A23) <= __pyx_v_eps) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L14_bool_binop_done:;
  if (__pyx_t_1) {
    (__pyx_v_vec[1]) = 1.0;
    (__pyx_v_vec[0]) = 0.0;
    (__pyx_v_vec[2]) = 0.0;
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "pysegtools/images/filters/_frangi.pyx":455
 *     if fabs(A11-r) <= eps and fabs(A12) <= eps and fabs(A13) <= eps: vec[0] = 1.0; vec[1] = vec[2] = 0.0; return False
 *     if fabs(A22-r) <= eps and fabs(A12) <= eps and fabs(A23) <= eps: vec[1] = 1.0; vec[0] = vec[2] = 0.0; return False
 *     if fabs(A33-r) <= eps and fabs(A13) <= eps and fabs(A23) <= eps: vec[2] = 1.0; vec[0] = vec[1] = 0.0; return False             # <<<<<<<<<<<<<<
 *     # Calculate the columns of (A-pI)*(A-qI) where p and q are the non-minimal eigenvalues and if a column
 *     # isn't all zeros then it is the eigenvector for the minimal eigenvalue. Note that (A-pI)*(A-qI) is symmetric.
 */
  __pyx_t_3 = ((fabs((__pyx_v_A33 - __pyx_v_r)) <= __pyx_v_eps) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L18_bool_binop_done;
  }
  __pyx_t_3 = ((fabs(__pyx_v_A13) <= __pyx_v_eps) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L18_bool_binop_done;
  }
  __pyx_t_3 = ((fabs(__pyx_v_A23) <= __pyx_v_eps) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L18_bool_binop_done:;
  if (__pyx_t_1) {
    (__pyx_v_vec[2]) = 1.0;
    (__pyx_v_vec[0]) = 0.0;
    (__pyx_v_vec[1]) = 0.0;
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "pysegtools/images/filters/_frangi.pyx":458
 *     # Calculate the columns of (A-pI)*(A-qI) where p and q are the non-minimal eigenvalues and if a column
 *     # isn't all zeros then it is the eigenvector for the minimal eigenvalue. Note that (A-pI)*(A-qI) is symmetric.
 *     p = eigs[1]; q = eigs[2]; p2 = p+q             # <<<<<<<<<<<<<<
 *     return (ev((A11-p)*(A11-q)+A12*A12+A13*A13, A12*(A11+A22-p2)+A23*A13, A13*(A11+A33-p2)+A23*A12, vec, eps) and
 *             ev(A12*(A11+A22-p2)+A23*A13, A12*A12+(A22-p)*(A22-q)+A23*A23, A13*A12+A23*(A22+A33-p2), vec, eps) and
 */
  __pyx_v_p = (__pyx_v_eigs[1]);
  __pyx_v_q = (__pyx_v_eigs[2]);
  __pyx_v_p2 = (__pyx_v_p + __pyx_v_q);

  /* "pysegtools/images/filters/_frangi.pyx":459
 *     # isn't all zeros then it is the eigenvector for the minimal eigenvalue. Note that (A-pI)*(A-qI) is symmetric.
 *     p = eigs[1]; q = eigs[2]; p2 = p+q
 *     return (ev((A11-p)*(A11-q)+A12*A12+A13*A13, A12*(A11+A22-p2)+A23*A13, A13*(A11+A33-p2)+A23*A12, vec, eps) and             # <<<<<<<<<<<<<<
 *             ev(A12*(A11+A22-p2)+A23*A13, A12*A12+(A22-p)*(A22-q)+A23*A23, A13*A12+A23*(A22+A33-p2), vec, eps) and
 *             ev(A13*(A11+A33-p2)+A23*A12, A13*A12+A23*(A22+A33-p2), A13*A13+A23*A23+(A33-p)*(A33-q), vec, eps))
 */
  __pyx_t_3 = (__pyx_f_10pysegtools_6images_7filters_7_frangi_ev(((((__pyx_v_A11 - __pyx_v_p) * (__pyx_v_A11 - __pyx_v_q)) + (__pyx_v_A12 * __pyx_v_A12)) + (__pyx_v_A13 * __pyx_v_A13)), ((__pyx_v_A12 * ((__pyx_v_A11 + __pyx_v_A22) - __pyx_v_p2)) + (__pyx_v_A23 * __pyx_v_A13)), ((__pyx_v_A13 * ((__pyx_v_A11 + __pyx_v_A33) - __pyx_v_p2)) + (__pyx_v_A23 * __pyx_v_A12)), __pyx_v_vec, __pyx_v_eps) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L21_bool_binop_done;
  }

  /* "pysegtools/images/filters/_frangi.pyx":460
 *     p = eigs[1]; q = eigs[2]; p2 = p+q
 *     return (ev((A11-p)*(A11-q)+A12*A12+A13*A13, A12*(A11+A22-p2)+A23*A13, A13*(A11+A33-p2)+A23*A12, vec, eps) and
 *             ev(A12*(A11+A22-p2)+A23*A13, A12*A12+(A22-p)*(A22-q)+A23*A23, A13*A12+A23*(A22+A33-p2), vec, eps) and             # <<<<<<<<<<<<<<
 *             ev(A13*(A11+A33-p2)+A23*A12, A13*A12+A23*(A22+A33-p2), A13*A13+A23*A23+(A33-p)*(A33-q), vec, eps))
 * 
 */
  __pyx_t_3 = (__pyx_f_10pysegtools_6images_7filters_7_frangi_ev(((__pyx_v_A12 * ((__pyx_v_A11 + __pyx_v_A22) - __pyx_v_p2)) + (__pyx_v_A23 * __pyx_v_A13)), (((__pyx_v_A12 * __pyx_v_A12) + ((__pyx_v_A22 - __pyx_v_p) * (__pyx_v_A22 - __pyx_v_q))) + (__pyx_v_A23 * __pyx_v_A23)), ((__pyx_v_A13 * __pyx_v_A12) + (__pyx_v_A23 * ((__pyx_v_A22 + __pyx_v_A33) - __pyx_v_p2))), __pyx_v_vec, __pyx_v_eps) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L21_bool_binop_done;
  }

  /* "pysegtools/images/filters/_frangi.pyx":461
 *     return (ev((A11-p)*(A11-q)+A12*A12+A13*A13, A12*(A11+A22-p2)+A23*A13, A13*(A11+A33-p2)+A23*A12, vec, eps) and
 *             ev(A12*(A11+A22-p2)+A23*A13, A12*A12+(A22-p)*(A22-q)+A23*A23, A13*A12+A23*(A22+A33-p2), vec, eps) and
 *             ev(A13*(A11+A33-p2)+A23*A12, A13*A12+A23*(A22+A33-p2), A13*A13+A23*A23+(A33-p)*(A33-q), vec, eps))             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint ev(dbl Vx, dbl Vy, dbl Vz, dbl[3] vec, dbl eps) nogil:
 */
  __pyx_t_3 = (__pyx_f_10pysegtools_6images_7filters_7_frangi_ev(((__pyx_v_A13 * ((__pyx_v_A11 + __pyx_v_A33) - __pyx_v_p2)) + (__pyx_v_A23 * __pyx_v_A12)), ((__pyx_v_A13 * __pyx_v_A12) + (__pyx_v_A23 * ((__pyx_v_A22 + __pyx_v_A33) - __pyx_v_p2))), (((__pyx_v_A13 * __pyx_v_A13) + (__pyx_v_A23 * __pyx_v_A23)) + ((__pyx_v_A33 - __pyx_v_p) * (__pyx_v_A33 - __pyx_v_q))), __pyx_v_vec, __pyx_v_eps) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L21_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "pysegtools/images/filters/_frangi.pyx":401
 *     return retval
 * 
 * cdef bint eig_calc(dbl Dxx, dbl Dxy, dbl Dxz, dbl Dyy, dbl Dyz, dbl Dzz, dbl[3] eigs, dbl[3] vec) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Internal function that calculates a single set of eigenvalues and possibly the minimal
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "pysegtools/images/filters/_frangi.pyx":463
 *             ev(A13*(A11+A33-p2)+A23*A12, A13*A12+A23*(A22+A33-p2), A13*A13+A23*A23+(A33-p)*(A33-q), vec, eps))
 * 
 * cdef inline bint ev(dbl Vx, dbl Vy, dbl Vz, dbl[3] vec, dbl eps) nogil:             # <<<<<<<<<<<<<<
 *     if fabs(Vx) <= eps and fabs(Vy) <= eps and fabs(Vz) <= eps: return True
 *     cdef dbl N = sqrt(Vx*Vx + Vy*Vy + Vz*Vz)
 */

static CYTHON_INLINE int __pyx_f_10pysegtools_6images_7filters_7_frangi_ev(__pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_Vx, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_Vy, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_Vz, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl *__pyx_v_vec, __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_eps) {
  __pyx_t_10pysegtools_6images_7filters_7_frangi_dbl __pyx_v_N;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "pysegtools/images/filters/_frangi.pyx":464
 * 
 * cdef inline bint ev(dbl Vx, dbl Vy, dbl Vz, dbl[3] vec, dbl eps) nogil:
 *     if fabs(Vx) <= eps and fabs(Vy) <= eps and fabs(Vz) <= eps: return True             # <<<<<<<<<<<<<<
 *     cdef dbl N = sqrt(Vx*Vx + Vy*Vy + Vz*Vz)
 *     vec[0] = Vx / N; vec[1] = Vy / N; vec[2] = Vz / N
 */
  __pyx_t_2 = ((fabs(__pyx_v_Vx) <= __pyx_v_eps) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((fabs(__pyx_v_Vy) <= __pyx_v_eps) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((fabs(__pyx_v_Vz) <= __pyx_v_eps) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "pysegtools/images/filters/_frangi.pyx":465
 * cdef inline bint ev(dbl Vx, dbl Vy, dbl Vz, dbl[3] vec, dbl eps) nogil:
 *     if fabs(Vx) <= eps and fabs(Vy) <= eps and fabs(Vz) <= eps: return True
 *     cdef dbl N = sqrt(Vx*Vx + Vy*Vy + Vz*Vz)             # <<<<<<<<<<<<<<
 *     vec[0] = Vx / N; vec[1] = Vy / N; vec[2] = Vz / N
 *     return False
 */
  __pyx_v_N = sqrt((((__pyx_v_Vx * __pyx_v_Vx) + (__pyx_v_Vy * __pyx_v_Vy)) + (__pyx_v_Vz * __pyx_v_Vz)));

  /* "pysegtools/images/filters/_frangi.pyx":466
 *     if fabs(Vx) <= eps and fabs(Vy) <= eps and fabs(Vz) <= eps: return True
 *     cdef dbl N = sqrt(Vx*Vx + Vy*Vy + Vz*Vz)
 *     vec[0] = Vx / N; vec[1] = Vy / N; vec[2] = Vz / N             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
  (__pyx_v_vec[0]) = (__pyx_v_Vx / __pyx_v_N);
  (__pyx_v_vec[1]) = (__pyx_v_Vy / __pyx_v_N);
  (__pyx_v_vec[2]) = (__pyx_v_Vz / __pyx_v_N);

  /* "pysegtools/images/filters/_frangi.pyx":467
 *     cdef dbl N = sqrt(Vx*Vx + Vy*Vy + Vz*Vz)
 *     vec[0] = Vx / N; vec[1] = Vy / N; vec[2] = Vz / N
 *     return False             # <<<<<<<<<<<<<<
 * 
 * # This can be done with LAPACK as well, but it is 6-13x slower (since it is generalized to any matrix size)!
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "pysegtools/images/filters/_frangi.pyx":463
 *             ev(A13*(A11+A33-p2)+A23*A12, A13*A12+A23*(A22+A33-p2), A13*A13+A23*A23+(A33-p)*(A33-q), vec, eps))
 * 
 * cdef inline bint ev(dbl Vx, dbl Vy, dbl Vz, dbl[3] vec, dbl eps) nogil:             # <<<<<<<<<<<<<<
 *     if fabs(Vx) <= eps and fabs(Vy) <= eps and fabs(Vz) <= eps: return True
 *     cdef dbl N = sqrt(Vx*Vx + Vy*Vy + Vz*Vz)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "_frangi",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_Dxx, __pyx_k_Dxx, sizeof(__pyx_k_Dxx), 0, 0, 1, 1},
  {&__pyx_n_s_Dxy, __pyx_k_Dxy, sizeof(__pyx_k_Dxy), 0, 0, 1, 1},
  {&__pyx_n_s_Dxz, __pyx_k_Dxz, sizeof(__pyx_k_Dxz), 0, 0, 1, 1},
  {&__pyx_n_s_Dyy, __pyx_k_Dyy, sizeof(__pyx_k_Dyy), 0, 0, 1, 1},
  {&__pyx_n_s_Dyz, __pyx_k_Dyz, sizeof(__pyx_k_Dyz), 0, 0, 1, 1},
  {&__pyx_n_s_Dzz, __pyx_k_Dzz, sizeof(__pyx_k_Dzz), 0, 0, 1, 1},
  {&__pyx_n_s_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 0, 1, 1},
  {&__pyx_n_s_Ra2, __pyx_k_Ra2, sizeof(__pyx_k_Ra2), 0, 0, 1, 1},
  {&__pyx_n_s_Rb2, __pyx_k_Rb2, sizeof(__pyx_k_Rb2), 0, 0, 1, 1},
  {&__pyx_n_s_S2, __pyx_k_S2, sizeof(__pyx_k_S2), 0, 0, 1, 1},
  {&__pyx_n_s_V, __pyx_k_V, sizeof(__pyx_k_V), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_beta, __pyx_k_beta, sizeof(__pyx_k_beta), 0, 0, 1, 1},
  {&__pyx_n_s_black, __pyx_k_black, sizeof(__pyx_k_black), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_c_dyn, __pyx_k_c_dyn, sizeof(__pyx_k_c_dyn), 0, 0, 1, 1},
  {&__pyx_n_s_correlate1d, __pyx_k_correlate1d, sizeof(__pyx_k_correlate1d), 0, 0, 1, 1},
  {&__pyx_n_s_dirs, __pyx_k_dirs, sizeof(__pyx_k_dirs), 0, 0, 1, 1},
  {&__pyx_n_s_exp, __pyx_k_exp, sizeof(__pyx_k_exp), 0, 0, 1, 1},
  {&__pyx_n_s_first, __pyx_k_first, sizeof(__pyx_k_first), 0, 0, 1, 1},
  {&__pyx_n_s_frangi2, __pyx_k_frangi2, sizeof(__pyx_k_frangi2), 0, 0, 1, 1},
  {&__pyx_n_s_frangi3, __pyx_k_frangi3, sizeof(__pyx_k_frangi3), 0, 0, 1, 1},
  {&__pyx_kp_s_home_jbush_CHM_segtools_pysegto, __pyx_k_home_jbush_CHM_segtools_pysegto, sizeof(__pyx_k_home_jbush_CHM_segtools_pysegto), 0, 0, 1, 0},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_im, __pyx_k_im, sizeof(__pyx_k_im), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_lam1, __pyx_k_lam1, sizeof(__pyx_k_lam1), 0, 0, 1, 1},
  {&__pyx_n_s_lam2, __pyx_k_lam2, sizeof(__pyx_k_lam2), 0, 0, 1, 1},
  {&__pyx_n_s_lam23, __pyx_k_lam23, sizeof(__pyx_k_lam23), 0, 0, 1, 1},
  {&__pyx_n_s_lam3, __pyx_k_lam3, sizeof(__pyx_k_lam3), 0, 0, 1, 1},
  {&__pyx_n_s_lambda1, __pyx_k_lambda1, sizeof(__pyx_k_lambda1), 0, 0, 1, 1},
  {&__pyx_n_s_lambda2, __pyx_k_lambda2, sizeof(__pyx_k_lambda2), 0, 0, 1, 1},
  {&__pyx_n_s_lambda3, __pyx_k_lambda3, sizeof(__pyx_k_lambda3), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_out, __pyx_k_out, sizeof(__pyx_k_out), 0, 0, 1, 1},
  {&__pyx_n_s_pDirs, __pyx_k_pDirs, sizeof(__pyx_k_pDirs), 0, 0, 1, 1},
  {&__pyx_n_s_pDxx, __pyx_k_pDxx, sizeof(__pyx_k_pDxx), 0, 0, 1, 1},
  {&__pyx_n_s_pDxy, __pyx_k_pDxy, sizeof(__pyx_k_pDxy), 0, 0, 1, 1},
  {&__pyx_n_s_pDxz, __pyx_k_pDxz, sizeof(__pyx_k_pDxz), 0, 0, 1, 1},
  {&__pyx_n_s_pDyy, __pyx_k_pDyy, sizeof(__pyx_k_pDyy), 0, 0, 1, 1},
  {&__pyx_n_s_pDyz, __pyx_k_pDyz, sizeof(__pyx_k_pDyz), 0, 0, 1, 1},
  {&__pyx_n_s_pDzz, __pyx_k_pDzz, sizeof(__pyx_k_pDzz), 0, 0, 1, 1},
  {&__pyx_n_s_pOut, __pyx_k_pOut, sizeof(__pyx_k_pOut), 0, 0, 1, 1},
  {&__pyx_n_s_pSigs, __pyx_k_pSigs, sizeof(__pyx_k_pSigs), 0, 0, 1, 1},
  {&__pyx_n_s_pVecX, __pyx_k_pVecX, sizeof(__pyx_k_pVecX), 0, 0, 1, 1},
  {&__pyx_n_s_pVecY, __pyx_k_pVecY, sizeof(__pyx_k_pVecY), 0, 0, 1, 1},
  {&__pyx_n_s_pVecZ, __pyx_k_pVecZ, sizeof(__pyx_k_pVecZ), 0, 0, 1, 1},
  {&__pyx_n_s_pysegtools_images_filters__frang, __pyx_k_pysegtools_images_filters__frang, sizeof(__pyx_k_pysegtools_images_filters__frang), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_return_full, __pyx_k_return_full, sizeof(__pyx_k_return_full), 0, 0, 1, 1},
  {&__pyx_n_s_round, __pyx_k_round, sizeof(__pyx_k_round), 0, 0, 1, 1},
  {&__pyx_n_s_scipy_ndimage, __pyx_k_scipy_ndimage, sizeof(__pyx_k_scipy_ndimage), 0, 0, 1, 1},
  {&__pyx_n_s_sigma, __pyx_k_sigma, sizeof(__pyx_k_sigma), 0, 0, 1, 1},
  {&__pyx_n_s_sigmas, __pyx_k_sigmas, sizeof(__pyx_k_sigmas), 0, 0, 1, 1},
  {&__pyx_n_s_sigs, __pyx_k_sigs, sizeof(__pyx_k_sigs), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_tmp, __pyx_k_tmp, sizeof(__pyx_k_tmp), 0, 0, 1, 1},
  {&__pyx_n_s_vecx, __pyx_k_vecx, sizeof(__pyx_k_vecx), 0, 0, 1, 1},
  {&__pyx_n_s_vecy, __pyx_k_vecy, sizeof(__pyx_k_vecy), 0, 0, 1, 1},
  {&__pyx_n_s_vecz, __pyx_k_vecz, sizeof(__pyx_k_vecz), 0, 0, 1, 1},
  {&__pyx_n_s_vx, __pyx_k_vx, sizeof(__pyx_k_vx), 0, 0, 1, 1},
  {&__pyx_n_s_vy, __pyx_k_vy, sizeof(__pyx_k_vy), 0, 0, 1, 1},
  {&__pyx_n_s_vz, __pyx_k_vz, sizeof(__pyx_k_vz), 0, 0, 1, 1},
  {&__pyx_n_s_with_cython, __pyx_k_with_cython, sizeof(__pyx_k_with_cython), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 68, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 68, __pyx_L1_error)
  #endif
  __pyx_builtin_round = __Pyx_GetBuiltinName(__pyx_n_s_round); if (!__pyx_builtin_round) __PYX_ERR(0, 342, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pysegtools/images/filters/_frangi.pyx":24
 * 
 * ########## Frangi 2D ##########
 * def frangi2(ndarray im, ndarray out, tuple sigmas, dbl beta, dbl c, bint black, bint return_full):             # <<<<<<<<<<<<<<
 *     """
 *     Internal function to compute the 2D Frangi filter according to Frangi et al (1998).
 */
  __pyx_tuple_ = PyTuple_Pack(34, __pyx_n_s_im, __pyx_n_s_out, __pyx_n_s_sigmas, __pyx_n_s_beta, __pyx_n_s_c, __pyx_n_s_black, __pyx_n_s_return_full, __pyx_n_s_Dxx, __pyx_n_s_Dxy, __pyx_n_s_Dyy, __pyx_n_s_tmp, __pyx_n_s_sigs, __pyx_n_s_dirs, __pyx_n_s_pDxx, __pyx_n_s_pDxy, __pyx_n_s_pDyy, __pyx_n_s_lambda1, __pyx_n_s_lambda2, __pyx_n_s_vx, __pyx_n_s_vy, __pyx_n_s_pOut, __pyx_n_s_pSigs, __pyx_n_s_pDirs, __pyx_n_s_sigma, __pyx_n_s_lam1, __pyx_n_s_lam2, __pyx_n_s_Rb2, __pyx_n_s_S2, __pyx_n_s_V, __pyx_n_s_b, __pyx_n_s_c_dyn, __pyx_n_s_i, __pyx_n_s_N, __pyx_n_s_first); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(7, 0, 34, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_jbush_CHM_segtools_pysegto, __pyx_n_s_frangi2, 24, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 24, __pyx_L1_error)

  /* "pysegtools/images/filters/_frangi.pyx":218
 * 
 * ########## Frangi 3D ##########
 * def frangi3(ndarray im, ndarray out, tuple sigmas, dbl alpha, dbl beta, dbl c, bint black, bint return_full):             # <<<<<<<<<<<<<<
 *     """
 *     Internal function to compute the 3D Frangi filter according to Frangi et al (1998).
 */
  __pyx_tuple__3 = PyTuple_Pack(50, __pyx_n_s_im, __pyx_n_s_out, __pyx_n_s_sigmas, __pyx_n_s_alpha, __pyx_n_s_beta, __pyx_n_s_c, __pyx_n_s_black, __pyx_n_s_return_full, __pyx_n_s_Dxx, __pyx_n_s_Dxy, __pyx_n_s_Dxz, __pyx_n_s_Dyy, __pyx_n_s_Dyz, __pyx_n_s_Dzz, __pyx_n_s_tmp, __pyx_n_s_sigs, __pyx_n_s_vecx, __pyx_n_s_vecy, __pyx_n_s_vecz, __pyx_n_s_pDxx, __pyx_n_s_pDxy, __pyx_n_s_pDxz, __pyx_n_s_pDyy, __pyx_n_s_pDyz, __pyx_n_s_pDzz, __pyx_n_s_lambda1, __pyx_n_s_lambda2, __pyx_n_s_lambda3, __pyx_n_s_vx, __pyx_n_s_vy, __pyx_n_s_vz, __pyx_n_s_pOut, __pyx_n_s_pSigs, __pyx_n_s_pVecX, __pyx_n_s_pVecY, __pyx_n_s_pVecZ, __pyx_n_s_sigma, __pyx_n_s_lam1, __pyx_n_s_lam2, __pyx_n_s_lam3, __pyx_n_s_lam23, __pyx_n_s_Ra2, __pyx_n_s_Rb2, __pyx_n_s_S2, __pyx_n_s_V, __pyx_n_s_b, __pyx_n_s_c_dyn, __pyx_n_s_i, __pyx_n_s_N, __pyx_n_s_first); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(8, 0, 50, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_jbush_CHM_segtools_pysegto, __pyx_n_s_frangi3, 218, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_frangi(void); /*proto*/
PyMODINIT_FUNC init_frangi(void)
#else
PyMODINIT_FUNC PyInit__frangi(void); /*proto*/
PyMODINIT_FUNC PyInit__frangi(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__frangi(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_frangi", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pysegtools__images__filters___frangi) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pysegtools.images.filters._frangi")) {
      if (unlikely(PyDict_SetItemString(modules, "pysegtools.images.filters._frangi", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  __pyx_ptype_10npy_helper_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_10npy_helper_ndarray)) __PYX_ERR(1, 431, __pyx_L1_error)
  __pyx_ptype_10npy_helper_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_10npy_helper_dtype)) __PYX_ERR(1, 434, __pyx_L1_error)
  __pyx_ptype_10npy_helper_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_10npy_helper_flatiter)) __PYX_ERR(1, 500, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "pysegtools/images/filters/_frangi.pyx":11
 * 
 * from npy_helper cimport *
 * import_array()             # <<<<<<<<<<<<<<
 * 
 * from libc.math cimport floor, fabs, sqrt, exp, atan2, acos, cos, M_PI
 */
  import_array();

  /* "pysegtools/images/filters/_frangi.pyx":16
 * from libc.float cimport DBL_EPSILON
 * 
 * __all__ = ['frangi2', 'frangi3']             # <<<<<<<<<<<<<<
 * 
 * with_cython = True
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_frangi2);
  __Pyx_GIVEREF(__pyx_n_s_frangi2);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_frangi2);
  __Pyx_INCREF(__pyx_n_s_frangi3);
  __Pyx_GIVEREF(__pyx_n_s_frangi3);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_frangi3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":18
 * __all__ = ['frangi2', 'frangi3']
 * 
 * with_cython = True             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double dbl
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_with_cython, Py_True) < 0) __PYX_ERR(0, 18, __pyx_L1_error)

  /* "pysegtools/images/filters/_frangi.pyx":24
 * 
 * ########## Frangi 2D ##########
 * def frangi2(ndarray im, ndarray out, tuple sigmas, dbl beta, dbl c, bint black, bint return_full):             # <<<<<<<<<<<<<<
 *     """
 *     Internal function to compute the 2D Frangi filter according to Frangi et al (1998).
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_10pysegtools_6images_7filters_7_frangi_1frangi2, NULL, __pyx_n_s_pysegtools_images_filters__frang); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_frangi2, __pyx_t_1) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":218
 * 
 * ########## Frangi 3D ##########
 * def frangi3(ndarray im, ndarray out, tuple sigmas, dbl alpha, dbl beta, dbl c, bint black, bint return_full):             # <<<<<<<<<<<<<<
 *     """
 *     Internal function to compute the 3D Frangi filter according to Frangi et al (1998).
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_10pysegtools_6images_7filters_7_frangi_3frangi3, NULL, __pyx_n_s_pysegtools_images_filters__frang); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_frangi3, __pyx_t_1) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysegtools/images/filters/_frangi.pyx":1
 * #!python             # <<<<<<<<<<<<<<
 * #cython: boundscheck=False, wraparound=False, initializedcheck=False, cdivision=True
 * #distutils: language=c++
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pysegtools.images.filters._frangi", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pysegtools.images.filters._frangi");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
  static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value) {
    const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(Py_intptr_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Py_intptr_t),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
  static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *x) {
    const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (Py_intptr_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (Py_intptr_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(Py_intptr_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(Py_intptr_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) >= 2 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((((Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(Py_intptr_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) >= 3 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((((((Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(Py_intptr_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) >= 4 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((((((((Py_intptr_t)digits[3]) << PyLong_SHIFT) | (Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (Py_intptr_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (Py_intptr_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(Py_intptr_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(Py_intptr_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(Py_intptr_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 2 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((Py_intptr_t)-1)*(((((Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(Py_intptr_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 2 * PyLong_SHIFT) {
                            return (Py_intptr_t) ((((((Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(Py_intptr_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 3 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((Py_intptr_t)-1)*(((((((Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(Py_intptr_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 3 * PyLong_SHIFT) {
                            return (Py_intptr_t) ((((((((Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(Py_intptr_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 4 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((Py_intptr_t)-1)*(((((((((Py_intptr_t)digits[3]) << PyLong_SHIFT) | (Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(Py_intptr_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 4 * PyLong_SHIFT) {
                            return (Py_intptr_t) ((((((((((Py_intptr_t)digits[3]) << PyLong_SHIFT) | (Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(Py_intptr_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            Py_intptr_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (Py_intptr_t) -1;
        }
    } else {
        Py_intptr_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (Py_intptr_t) -1;
        val = __Pyx_PyInt_As_Py_intptr_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to Py_intptr_t");
    return (Py_intptr_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to Py_intptr_t");
    return (Py_intptr_t) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
  #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
